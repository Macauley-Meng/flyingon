"use strict"; var flyingon = (function () { function fn(selector, start, repeat_id) { return new flyingon.Query(selector, start, repeat_id); }; fn.current_version = "0.0.1"; fn.current_language = this.current_language || "zh-CHS"; fn.current_theme = this.current_theme || "default"; fn.themes_path = this.themes_path || "/themes/"; fn.icons_path = this.icons_path || "/icons/"; return fn; }).call(flyingon || {}); (function (flyingon) { Object.create || (Object.create = (function () { function fn() { }; return function (prototype) { fn.prototype = prototype; return new fn(); }; })()); Object.keys || (Object.keys = function (target) { var keys = []; if (target) { for (var name in target) { keys.push(name); } } return keys; }); Object.getOwnPropertyNames || (Object.getOwnPropertyNames = function (target) { var names = []; if (target) { for (var name in target) { if (target.hasOwnProperty(name)) { names.push(name); } } } return names; }); Object.prototype.hasOwnProperty || (Object.prototype.hasOwnProperty = function (name) { if (name in this) { var target = this.constructor; return !target || !(target = target.prototype) || !(name in target) || this[name] !== target[name]; } return false; }); (function () { this.indexOf || (this.indexOf = function (item, index) { for (var i = index || 0, _ = this.length; i < _; i++) { if (this[i] === item) { return i; } } return -1; }); this.lastIndexOf || (this.lastIndexOf = function (item, index) { for (var i = index || this.length - 1; i >= 0; i--) { if (this[i] === item) { return i; } } return -1; }); this.remove || (this.remove = function (item) { var index = this.indexOf(item); if (index >= 0) { this.splice(index, 1); } }); this.forEach || (this.forEach = function (callback, thisArg) { if (callback) { thisArg = thisArg || this; for (var i = 0, _ = this.length; i < _; i++) { callback.call(thisArg, this[i], i); } } }); }).call(Array.prototype); flyingon.function_name = function (fn) { if (fn) { fn = "" + fn; fn = fn.match(/function\s*(\w+)\s*\(/); return fn ? fn[1] : "<anonymous>"; } }; var function_body = flyingon.function_body = function (fn) { if (fn) { fn = "" + fn; return fn.substring(fn.indexOf("{") + 1, fn.lastIndexOf("}")); } }; var function_parameters = flyingon.function_parameters = function (fn) { if (fn && fn.length > 0) { fn = "" + fn; fn = fn.match(/\([^)]*\)/)[0]; fn = fn.substring(1, fn.length - 1).replace(/\s+/g, "");; return fn.split(","); } return []; }; flyingon.function_copy = function (fn, parameters) { return fn && new Function(parameters || function_parameters(fn), function_body(fn)); }; flyingon.function_replace = function (fn, body) { if (fn && body) { body = body.constructor === Function ? function_body(body) : "" + body; return new Function(function_parameters(fn), body); } }; flyingon.function_merge = function (fn, body, insertBefore, parameters) { if (fn && body) { body = body.constructor === Function ? function_body(body) : "" + body; body = insertBefore ? body + function_body(fn) : function_body(fn) + body; return new Function(parameters || function_parameters(fn), body); } }; flyingon.encode = function (data) { if (data) { var values = [], encode = encodeURIComponent; for (var name in data) { values.push(encode(name) + "=" + encode((data[name].toString()))); } return values.length > 0 ? values.join("&") : data.toString(); } return data; }; flyingon.encodeURL = function (url, data) { if (url && data) { var values = [], encode = encodeURIComponent; for (var name in data) { values.push(encode(name) + "=" + encode((data[name].toString()))); } return url + "?" + (values.length > 0 ? values.join("&") : data.toString()); } return url; }; })(flyingon); (function (flyingon) { var names = ["MSIE", "Chrome", "Firefox", "Safari", "Opera"], key = navigator.userAgent, value; if (value = key.match(new RegExp(names.join("|")))) { flyingon.browser = value = value[0]; for (var i = 0; i < names.length; i++) { flyingon["browser_" + names[i]] = names[i] === value; } } flyingon.browser_WebKit = !!key.match(/WebKit/); if (flyingon.browser_MSIE) { flyingon.quirks_mode = document.compatMode === "BackCompat"; } })(flyingon); flyingon.Exception = function (message, parameters) { flyingon.last_error = this; this.message = message; }; (function (flyingon) {
    var head = document.head || document.getElementsByTagName("head")[0] || document.documentElement; flyingon.script = (function (head) { function load(dom, callback, thisArg, error) { dom.onload = dom.onerror = dom.onreadystatechange = null; if (callback) { callback.call(thisArg, error); } if (dom.parentNode) { dom.parentNode.removeChild(dom); } }; return function (url, callback, thisArg) { var dom = document.createElement("script"); dom.type = "text/javascript"; dom.src = url; dom.onerror = function (error) { load(dom, callback, thisArg, error); }; dom.onload = dom.onreadystatechange = function () { var state = dom.readyState; if (!state || state === "loaded" || state === "complete") { load(dom, callback, thisArg); } }; head.appendChild(dom); }; })(head); flyingon.link = function (href, rel, type) { var dom = document.createElement("link"); dom.href = href; dom.rel = rel || "stylesheet"; dom.type = type || "text/css"; head.appendChild(dom); return dom; }; flyingon.jsonp = (function () { var id = 0; return function (url, callback_name) { callback_name = "callback=" + encodeURIComponent(callback_name) + "&unique=" + (++id); flyingon.script((url.indexOf("?") > 0 ? "&" : "?") + callback_name); }; })(); flyingon.require = (function () {
        function load(files, index, callback, thisArg) {
            flyingon.script(files[index++], function () {
                if (index < files.length) { load(files, index, callback, thisArg); } else
                { callback.call(thisArg); }
            });
        }; return function (files, callback, thisArg) { if (files) { if (files.constructor === String) { flyingon.script(files, function () { callback.call(thisArg); }); } else if (files.length > 0) { load(files, 0, callback, thisArg); } } else if (callback) { callback.call(thisArg); } };
    })(); if (document.createStyleSheet)
    {
        flyingon.style = function (cssText, style) {
            if (style)
            {
                if (cssText) { style.cssText += cssText; } else
                { style.cssText = ""; }
            } else
            { style = document.createStyleSheet(); if (cssText) { style.cssText = cssText; } } return style;
        };
    } else
    {
        flyingon.style = function (cssText, style) {
            if (style)
            {
                if (cssText) { style.dom.textContent += cssText; } else
                { style.dom.textContent = ""; }
            } else
            { var dom = document.createElement("style"); dom.setAttribute("type", "text/css"); if (cssText) { dom.textContent = cssText; } head.appendChild(dom); style = document.styleSheets[document.styleSheets.length - 1]; style.dom = dom; } return style;
        };
    }
})(flyingon); (function (flyingon) {
    function get_fn(name) { return function () { throw new flyingon.Exception("property \"" + name + "\" can not write!"); }; }; function set_fn(name) { return function () { alert("property \"" + name + "\" is read only!"); }; }; var target = {}; try
    { Object.defineProperty(target, "fn", { get: function () { return true; } }); } catch (e) { } if (target.fn) { flyingon.defineProperty = function (target, name, getter, setter) { var attributes = { configurable: true }; getter && (attributes.get = getter); setter && (attributes.set = setter); target["get_" + name] = getter || get_fn(name); target["set_" + name] = setter || set_fn(name); Object.defineProperty(target, name, attributes); }; } else if (window.__defineGetter__) { flyingon.defineProperty = function (target, name, getter, setter) { getter && target.__defineGetter__(name, getter); setter && target.__defineSetter__(name, setter); target["get_" + name] = getter || get_fn(name); target["set_" + name] = setter || set_fn(name); } } else { flyingon.defineProperty = function (target, name, getter, setter) { target["get_" + name] = getter || get_fn(name); target["set_" + name] = setter || set_fn(name); }; } flyingon.defineProperties = function (target, names, getter, setter) { for (var i = 0, _ = names.length; i < _; i++) { flyingon.defineProperty(target, names[i], getter, setter); } };
})(flyingon); (function (flyingon) {
    var namespace_list = { "flyingon": flyingon }, class_list = flyingon.__registry_class_list = {}, anonymous_index = 1, fn_parameters = flyingon.function_parameters, fn_body = flyingon.function_body, regex_has = /\w/, _this = this; flyingon.registry_class = function (Class, xtype) { class_list[xtype || Class.xtype] = Class; }; flyingon.get_regsitry_class = function (xtype) { return class_list[xtype]; }; flyingon.extend = function (target, superclass) {
        if (!superclass) { throw new flyingon.Exception("superclass can not be null!"); } target["__flyingon_" + (superclass.xtype || (superclass.xtype = "anonymous_type_" + anonymous_index++))] = true; if (superclass.constructor === Function) { superclass.apply(target, arguments.length > 2 ? [].slice.call(arguments, 2) : []); } else
        { for (var name in superclass) { target[name] = superclass[name]; } } target.is = target.is || is;
    }; function namespace_fn(name) { this.namespace_name = name; namespace_list[name] = this; }; flyingon.namespace_name = "flyingon"; flyingon.namespace = function (namespace, files, fn) {
        var result = namespace; if (result)
        {
            if (result.constructor === String && !(result = namespace_list[result]))
            {
                var names = namespace.split("."), name, value; result = _this; for (var i = 0, _ = names.length; i < _; i++)
                {
                    if ((name = names[i]) && !name.match(/^\d|\W/)) { value = (value && value + "." + name) || name; result = result[name] || (result[name] = new namespace_fn(value)); } else
                    { throw new flyingon.Exception("名字空间只能使用字母及数字且不能以数字开头,多级名字空间需使用\".\"分隔"); }
                }
            }
        } else
        { result = flyingon; } if (fn) { flyingon.require(files, fn, result); } else if (fn = files) { fn.call(result); } return result;
    }; flyingon.defineClass = namespace_fn.prototype.defineClass = function (name, superclass, class_fn) {
        var Class_old = window.Class, Class = window.Class = function () { }, anonymous, base, prototype, fn, chain, body; if (anonymous = !name) { name = "anonymous_type_" + anonymous_index++; } else if (name.constructor !== String) { class_fn = superclass; superclass = name; name = "anonymous_type_" + anonymous_index++; anonymous = true; } else if (name.match(/^\d|\W/)) { throw new flyingon.Exception("Class name can only use letters and numbers and cannot begin with a digit!"); } if (!class_fn)
        {
            if (class_fn = superclass) { superclass = null; } else
            { throw new flyingon.Exception("class_fn can not be null!"); }
        } if (class_fn.constructor !== Function) { var target = class_fn; class_fn = function () { for (var name in target) { this[name] = target[name]; } }; } base = (superclass || Object).prototype, prototype = Object.create(base); if (!anonymous) { Class.typeName = name; Class.xtype = prototype.xtype = this.namespace_name + "." + name; this[name] = class_list[prototype.xtype] = Class; } prototype.__defaults = Object.create(base.__defaults || null); prototype.toString = toString; class_fn.call(prototype, base); window.Class = Class_old; if (!superclass || Class.create_mode === "replace" || (!(chain = base.__create_chain) && !(body = fn_body(superclass)).match(regex_has))) { if (Class.create) { fn = Class.create; } } else if (Class.create) { if (chain || Class.create_mode !== "merge") { chain = prototype.__create_chain = chain && chain.slice(0) || [superclass]; chain.push(Class.create); fn = chain_class(fn_parameters(Class.create), chain); } else { fn = new Function(fn_parameters(Class.create), body += fn_body(Class.create)); } } else if (chain) { prototype.__create_chain = chain; fn = chain_class(fn_parameters(superclass), chain); } else { fn = new Function(fn_parameters(superclass), fn_body(superclass)); } if (fn) { for (var key in Class) { if (key !== "create" && key !== "create_mode") { fn[key] = Class[key]; } } if (prototype.xtype) { this[fn.typeName = name] = class_list[fn.xtype = prototype.xtype] = fn; } Class = fn; fn = null; } Class.prototype = prototype; Class.superclass = superclass; Class.base = base; Class.namesapce = this; prototype.Class = prototype.constructor = Class; prototype.is = is; if (prototype.__Class_initialize__) { prototype.__Class_initialize__(Class); } return Class;
    }; function is(type) { return type != null && (this instanceof type || (type.xtype && type.xtype in this)); }; function toString() { return "[object " + this.xtype + "]"; }; function chain_class(parameters, chain) { var body = ["var chain = this.__create_chain;"]; for (var i = 0, _ = chain.length; i < _; i++) { body.push("chain[" + i + "].apply(this, arguments);"); } return new Function(parameters, body.join("\n")); };
})(flyingon); (function (flyingon) {
    var id = 1; flyingon.addEventListener = window.addEventListener ? function (dom, type, listener) { dom.addEventListener(type, listener); } : function (dom, type, listener) { var events = (dom.__events || (dom.__events = {}))[type]; if (!events) { events = dom.__events[type] = {}; if (dom[type = "on" + type]) { events[0] = dom[type]; } dom[type] = handle_event; } events[listener.__events_id || (listener.__events_id = id++)] = listener; }; flyingon.removeEventListener = window.removeEventListener ? function (dom, type, listener) { dom.removeEventListener(type, listener); } : function (dom, type, listener) {
        var events = dom.__events; if (events && events[type])
        {
            if (listener) { delete events[type][listener.__events_id]; } else
            { delete events[type]; }
        }
    }; function handle_event(event) { var result = true, events = this.__events[(event || (event = fix_event(window.event))).type]; for (var id in events) { if (events[id].call(this, event) === false) { result = false; } } return result; }; function preventDefault() { this.returnValue = false; }; function stopPropagation() { this.cancelBubble = true; }; function stopImmediatePropagation() { this.cancelBubble = true; this.returnValue = false; }; function fix_event(event) { event.target = event.target || event.srcElement; event.preventDefault = preventDefault; event.stopPropagation = stopPropagation; event.stopImmediatePropagation = stopImmediatePropagation; return event; }; flyingon.__fn_fix_event = fix_event;
})(flyingon); flyingon.IEvent = function () { this.defineEvent = function (type) { flyingon.defineProperty(this, "on" + type, function () { return this.__events_data && this.__events_data[type] || null; }, function (value) { (this.__events_data || (this.__events_data = {}))[type] = [value]; if (this.__events_cache) { this.__events_cache[type] = null; } }); return this; }; this.defineEvents = function () { for (var i = 0, _ = arguments.length; i < _; i++) { this.defineEvent(arguments[i]); } return this; }; this.addEventListener = this.on = function (type, listener, useCapture) { if (listener) { var events = (this.__events_data || (this.__events_data = {})); listener.useCapture = useCapture; (events[type] || (events[type] = [])).push(listener); if (this.__events_cache) { this.__events_cache[type] = null; } } return this; }; this.removeEventListener = this.off = function (type, listener) { var events = this.__events_data; if (events && (events = events[type])) { if (listener == null) { events.length = 0; } else if (events.indexOf(listener) >= 0) { events.splice(listener, 1); } this.__events_cache[type] = null; } return this; }; this.dispatchEvent = function (event) { var type = event.type || (event = new flyingon.Event(event)).type, events = this.__events_cache, length; event.target = this; events = events && events[type] || cache_events(this, type); if ((length = events.length) > 0) { for (var i = 0; i < length; i++) { var target = events[i++]; if (events[i].call(target, event) === false) { event.preventDefault(); } if (event.cancelBubble) { break; } } return !event.defaultPrevented; } }; this.hasEvent = function (type) { var events = this.__events_cache; return (events && events[type] || cache_events(this, type)).length > 0; }; function cache_events(target, type) { var result = (target.__events_cache || (target.__events_cache = {}))[type] = [], events, event, name; while (target) { if ((name = "__event_capture_" + type) in target) { result.unshift(target, target[name]); } if ((events = target.__events_data) && (events = events[type])) { for (var i = 0, _ = events.length; i < _; i++) { if ((event = events[i]).useCapture) { result.unshift(target, event); } else { result.push(target, event); } } } if ((name = "__event_bubble_" + type) in target) { result.push(target, target[name]); } target = target.__parent; } return result; }; }; (function (flyingon) { flyingon.Xml = flyingon.defineClass(function () { Class.create = function (xml_string) { if (xml_string) { this.parse(xml_string); } }; if (document.implementation && document.implementation.createDocument) { this.parse = function (xml_string) { this.document = new DOMParser().parseFromString(xml_string, "text/xml"); this.dom = this.document.documentElement; }; this.load = function (xml_file, async) { this.document = document.implementation.createDocument('', '', null); this.document.load(xml_file); this.dom = this.document.documentElement; }; this.serialize = function () { return new XMLSerializer().serializeToString(this.document); }; } else { this.parse = function (xml_string) { this.document = new ActiveXObject("Microsoft.XMLDOM"); this.document.async = "false"; this.document.loadXML(xml_string); this.dom = this.document.documentElement; }; this.load = function (xml_file, async) { this.document = new ActiveXObject('Microsoft.XMLDOM'); this.document.async = !!async; this.document.load(xml_file); this.dom = this.document.documentElement; }; this.serialize = function () { return this.document.xml; }; } }); var regex_encode = /[\<\>\"\'\&]/g, regex_decode = /&lt;|&gt;|&quot;|&apos;|&amp;/g, encode_keys = { "<": "&lt;", ">": "&gt;", "\"": "&quot;", "'": "&apos;", "&": "&amp;" }, decode_keys = { "&lt;": "<", "&gt;": ">", "&quot;": "\"", "&apos;": "'", "&nbsp;": " ", "&amp;": "&" }; flyingon.encode_xml = function (data) { return data.replace(regex_encode, function (key) { return encode_keys[key]; }); }; flyingon.decode_xml = function (data) { return data.replace(regex_decode, function (key) { return decode_keys[key]; }); }; flyingon.parseXml = function (xml_string) { if (xml_string) { xml_string = xml_string.replace(/\>\s+/g, ">").replace(/\s+\</g, "<"); return parse_xml(new flyingon.Xml(xml_string).dom); } return null; }; function parse_xml(node) { var type = node.getAttribute("t") || "s", target, items, item; switch (type) { case "u": return undefined; case "n": return null; case "b": return node.getAttribute("v") === "1"; case "d": return +node.getAttribute("v") || 0; case "s": return node.getAttribute("v") || ""; case "f": return eval("(function(){return " + (node.getAttribute("v") || "") + "})()"); case "a": target = []; items = node.childNodes; for (var i = 0, _ = items.length; i < _; i++) { target.push(parse_xml(items[i])); } return target; default: target = type === "o" ? {} : { xtype: type }; items = node.childNodes; for (var i = 0, _ = items.length; i < _; i++) { target[(item = items[i]).tagName] = parse_xml(item); } return target; } }; })(flyingon); (function (flyingon) {
    var element_node = flyingon.defineClass(function () {
        Class.create = function (nodes, type, token, name) {
            var last; if (type !== "," || nodes.length === 0) { this.type = type; nodes.push(this); } else if ((last = nodes[nodes.length - 1]) instanceof element_nodes) { last.push(this); } else
            { nodes.pop(); (nodes.forks || (nodes.forks = [])).push(nodes.length); nodes.push(new element_nodes(last, this)); } this.token = token; switch (name[0]) { case "\"": case "'": this.name = name.substring(1, name.length - 1); break; default: this.name = name; break; }
        }; this.type = null; this.token = null; this.name = null; this.pseudo = null; this.parameters = null; this.length = 0; this.push = function (item) { this[this.length++] = item; }; this.toString = function () { var result = []; if (this.type) { result.push(this.type); } result.push(this.token); result.push(this.name); if (this.parameters) { result.push("(" + this.parameters.join(",") + ")"); } if (this.length > 0) { result.push([].join.call(this, "")); } return result.join(""); };
    }); var element_nodes = flyingon.defineClass(function () { Class.create = function (first, second) { second.type = first.type; this[0] = first; this[1] = second; }; this.type = "or"; this.length = 2; this.push = function (item) { item.type = this[0].type; this[this.length++] = item; }; this.toString = function () { return [].join.call(this, ","); }; }); var element_property = flyingon.defineClass(function () { Class.create = function (name) { switch (name[0]) { case "\"": case "'": this.name = name.substring(1, name.length - 1); break; default: this.name = name; break; } }; this.token = "[]"; this.name = null; this.operator = ""; this.value = ""; this.toString = function () { return "[" + this.name + this.operator + this.value + "]"; }; }); var pseudo_class = flyingon.defineClass(function () { Class.create = function (name) { this.name = name; }; this.token = ":"; this.name = null; this.toString = function () { return ":" + this.name; }; }); function parse_property(values, length, index) {
        var property, token, count = 0, loop = true; while (loop && index < length)
        {
            count++; switch (token = values[index++])
            {
                case "]": loop = false; break; case "*": case "^": case "$": case "~": case "|": property.operator += token; break; case "=": property.operator += "="; break; case " ": break; default: if (property) { switch (token[0]) { case "\"": case "'": property.value = token.substring(1, token.length - 1); break; } } else
                { property = new element_property(token); } break;
            }
        } return {
            result: property, count: count
        };
    }; var split_regex = /"[^"]*"|'[^']*'|[\w-]+|[@.#* ,>+:=~|^$()\[\]]/g; flyingon.parse_selector = function (selector) { var nodes = [], node, tokens = selector.match(split_regex), token, type = "", i = 0, length = tokens.length, cache; while (i < length) { switch (token = tokens[i++]) { case "@": case "#": case ".": node = new element_node(nodes, type, token, tokens[i++]); type = ""; break; case "*": node = new element_node(nodes, type, "*", ""); type = ""; break; case " ": if (!type) { type = token; } break; case ">": case "+": case "~": case ",": type = token; break; case "[": cache = parse_property(tokens, length, i); i += cache.count; if (cache = cache.result) { if (!node) { node = new element_node(nodes, type, "*", ""); type = ""; } node.push(cache); } break; case ":": if ((token = tokens[i++]) === ":") { node = new element_node(nodes, type, "::", token); type = ""; if (i < length && tokens[i] === "(") { node.parameters = []; while ((token = tokens[++i]) !== ")") { switch (token) { case " ": case ",": break; default: node.parameters.push(token); break; } } i++; } } else { if (!node) { node = new element_node(nodes, type, "*", ""); type = ""; } node.push(new pseudo_class(token)); } break; case "]": case "=": case "|": case "^": case "$": case "(": case ")": continue; default: node = new element_node(nodes, type, "", token); type = ""; break; } } return nodes; };
})(flyingon); (function (flyingon) { })(flyingon); flyingon.defineClass("DataBinding", function () {
    var regex = /(source\s*.\s*(\w+))|(target\s*.\s*(\w+))|\"(\\\"|[^\"])*\"|\'(\\\'|[^\'])*\'/g; Class.create = function (target, name) {
        var bindings = target.__bindings; if (bindings) { if (bindings[name]) { bindings[name].dispose(); } bindings[name] = this; } else
        { (target.__bindings = {})[name] = this; } if (!(this.target = target).__bindings_fn) { target.__bindings_fn = {}; } (this.__target_names = {})[this.name = name] = true;
    }; function getter_fn(source, target, value) { var names1 = this.__source_names, names2 = this.__target_names, fn; value = ("" + value).replace(regex, function (_, x, x1, y, y1) { if (x1) { if (!names1[x1]) { names1[x1] = true; } return source.get ? "source.get('" + x1 + "')" : x; } if (y1) { if (!names2[y1]) { names2[y1] = true; } return "target.get('" + y1 + "')"; } return _; }); return new Function("source", "target", "target.set('" + this.name + "', " + value + ");"); }; this.init = function (source, expression, setter) { var target = this.target, bindings, fn; this.source = source; this.setter = setter; this.__source_names = {}; if (this.expression = expression) { bindings = source.__bindings_fn || (source.__bindings_fn = {}); if (expression.match(/^\d|[^\w]/)) { this.__fn_getter = fn = getter_fn.call(this, source, target, expression); } else if (source) { this.__source_names[expression] = true; if (setter === undefined) { setter = "target.get('" + this.name + "')"; setter = source.set ? "source.set('" + expression + "', " + setter + ");" : "source['" + expression + "'] = " + setter + ";"; } expression = source.get ? "source.get('" + expression + "')" : "source['" + expression + "']"; this.__fn_getter = fn = new Function("source", "target", "target.set('" + this.name + "', " + expression + ");"); } fn.__source = source; fn.__target = target; for (var name in this.__source_names) { (bindings[name] || (bindings[name] = [])).push(fn); } } if (setter) { this.__fn_setter = fn = new Function("source", "target", setter); fn.__source = source; fn.__target = target; bindings = target.__bindings_fn; for (var name in this.__target_names) { (bindings[name] || (bindings[name] = [])).push(fn); } } }; this.dispose = function () { var source = this.source, target = this.target, bindings, names, fn; if (bindings = target.__bindings) { delete bindings[this.name]; if ((fn = this.__fn_setter) && (bindings = target.__bindings_fn)) { remove(bindings, this.__target_names, fn); } if (source && (fn = this.__fn_getter) && (bindings = source.__bindings_fn)) { remove(bindings, this.__source_names, fn); } } this.source = null; this.target = null; }; function remove(bindings, names, fn) { var list, index; for (var name in names) { if ((list = bindings[name]) && (index = list.indexOf(fn)) >= 0) { list.splice(index, 1); } } fn.__source = null; fn.__target = null; };
}); flyingon.binding = function (source, name) {
    var bindings = source.__bindings_fn, list, fn; if (name) { if (list = bindings[name]) { for (var i = 0, _ = list.length; i < _; i++) { (fn = list[i])(fn.__source, fn.__target); } } } else
    { for (var name in bindings) { list = bindings[name]; for (var i = 0, _ = list.length; i < _; i++) { (fn = list[i])(fn.__source, fn.__target); } } }
}; flyingon.defineClass("SerializeReader", function () {
    var class_list = flyingon.__registry_class_list; this.parse = function (data, xml) { if (typeof data === "string") { if (xml == null && (data.charAt(0) === "<")) { xml = true; } return xml ? flyingon.parseXml(data) : eval("(" + data + ")"); } return data; }; this.deserialize = function (data, xml) { if (data = this.parse(data, xml)) { data = this[data.constructor === Array ? "read_array" : "read_object"](data); this.complete(); } return data; }; this.complete = function () {
        var source_list = this.__source_list, bindings = this.__binding_list, length, value; if (source_list) { this.__source_list = null; } else
        { source_list = {} } if (bindings && (length = bindings.length) > 0) { this.__binding_list = null; for (var i = 0; i < length; i++) { value = bindings[i]; new flyingon.DataBinding(value.target, value.name).init(source_list[value.source] || null, value.expression, value.setter); } }
    }; this.read_value = function (value) { if (value != null && typeof value === "object") { return this[value.constructor === Array ? "read_array" : "read_object"](value); } return value; }; this.read_bool = function (value) { return !!value; }; this.read_number = function (value) { return +value || 0; }; this.read_string = function (value) { return value == null ? "" : "" + value; }; this.read_function = function (value) { return value && value.constructor === Function ? value : eval("(function(){return " + value + "})()"); }; this.read_object = function (value) {
        if (value != null)
        {
            var result, cache; if (value.xtype && (cache = class_list[value.xtype])) { result = new cache(); delete value.xtype; } else
            { result = {}; } if (cache = value.__id__) { (this.__source_list || (this.__source_list = {}))[cache] = result; delete value.__id__; } if (result.deserialize) { result.deserialize(this, value); } else
            { this.read_properties(result, value); } return result;
        } return value;
    }; this.read_properties = function (target, value) { var names = Object.getOwnPropertyNames(value); for (var i = 0, _ = names.length; i < _; i++) { target[name = names[i]] = this.read_value(value[name]); } }; this.read_array = function (value) { if (value != null) { var result = []; for (var i = 0, _ = value.length; i < _; i++) { result.push(this.read_value(value[i])); } return result; } return value; }; this.read_bindings = function (target, data) { var result = target.__bindings = {}; for (var name in data) { var value = data[name]; if (this.__source_list && value.source in this.__source_list) { new flyingon.DataBinding(target, name).init(this.__source_list[value.source], value.expression, value.setter); } else { value.target = target; value.name = name; (this.__binding_list || (this.__binding_list = [])).push(value); } } return result; };
}); flyingon.defineClass("SerializeWriter", function () {
    this.length = 0; this.serialize = function (target) { this[target.constructor === Array ? "write_array" : "write_object"](null, target); return this.toString(); }; function write_name(name) { if (this[this.length - 1] !== "{") { this[this.length++] = ","; } this[this.length++] = "\"" + name + "\":"; }; this.write_value = function (name, value) {
        if (value == null) { this.write_null(name, value); } else
        {
            switch (typeof value)
            {
                case "boolean": this.write_bool(name, value); break; case "number": this.write_number(name, value); break; case "string": this.write_string(name, value); break; case "function": this.write_function(name, value); break; case "object": switch (typeof value)
                    {
                    case "boolean": this.write_bool(name, value); break; case "number": this.write_number(name, value); break; case "string": this.write_string(name, value); break; default: if (value.constructor === Array) { this.write_array(name, value); } else
                    { this.write_object(name, value); } break;
                } break;
            }
        }
    }; this.write_null = function (name, value) { if (name) { write_name.call(this, name); } this[this.length++] = "" + value; }; this.write_bool = function (name, value) { if (name) { write_name.call(this, name); } this[this.length++] = value ? "true" : "false"; }; this.write_number = function (name, value) { if (name) { write_name.call(this, name); } this[this.length++] = "" + (+value || 0); }; this.write_string = function (name, value) { if (name) { write_name.call(this, name); } this[this.length++] = "\"" + ("" + value).replace(/\"/g, "\\\"") + "\""; }; this.write_function = function (name, fn) { if (name) { write_name.call(this, name); } this[this.length++] = "" + fn; }; this.write_object = function (name, target) {
        if (name) { write_name.call(this, name); } if (target != null)
        {
            this[this.length++] = "{"; name = target.xtype; if ("__bindings_fn" in target) { this[this.length++] = "\"__id__\":" + (target.__id__ || (target.__id__ = this.length)); if (name) { this[this.length++] = ","; } } if (name) { this[this.length++] = "\"xtype\":\"" + name + "\""; } if ("serialize" in target) { target.serialize(this); } else
            { this.write_properties(target); } this[this.length++] = "}";
        } else
        { this[this.length++] = "" + target; }
    }; this.write_properties = function (target, names) { var name; names = names || Object.getOwnPropertyNames(target); for (var i = 0, _ = names.length; i < _; i++) { this.write_value(name = names[i], target[name]); } }; this.write_array = function (name, array) {
        if (name) { write_name.call(this, name); } if (array != null) { this[this.length++] = "["; for (var i = 0, _ = array.length; i < _; i++) { if (i > 0) { this[this.length++] = ","; } this.write_value(null, array[i]); } this[this.length++] = "]"; } else
        { this[this.length++] = "" + value; }
    }; this.write_bindings = function (bindings) { if (bindings) { write_name.call(this, "bindings"); this[this.length++] = "{"; for (var name in bindings) { var binding = bindings[name]; write_name.call(this, name); this[this.length++] = "{"; binding.source && this.write_number("source", binding.source.__id__ || (binding.source.__id__ = this.length)); binding.expression && this.write_string("expression", binding.expression); binding.setter && this.write_string("setter", binding.setter); this[this.length++] = "}"; } this[this.length++] = "}"; } }; this.write_events = function (events) { if (events) { write_name.call(this, "events"); this[this.length++] = "{"; for (var name in events) { this.write_function(name, events[name]); } this[this.length++] = "}"; } }; this.toString = function () { return [].join.call(this, ""); };
}); flyingon.defineClass("XmlSerializeWriter", flyingon.SerializeWriter, function (base) {
    var encode = flyingon.encode_xml; this.write_null = function (name, value) { this[this.length++] = "<" + name + " t=\"" + (value === null ? "n" : "u") + "\"/>"; }; this.write_bool = function (name, value) { this[this.length++] = "<" + name + " t=\"b\" v=\"" + (value ? "1" : "0") + "\"/>"; }; this.write_number = function (name, value) { this[this.length++] = "<" + name + " t=\"d\" v=\"" + (+value || 0) + "\"/>"; }; this.write_string = function (name, value) { this[this.length++] = "<" + name + " t=\"s\" v=\"" + encode("" + value) + "\"/>"; }; this.write_function = function (name, fn) { this[this.length++] = "<" + name + " t=\"f\" v=\"" + encode("" + fn) + "\"/>"; }; this.write_object = function (name, target) {
        if (target != null)
        {
            this[this.length++] = "<" + (name = name || "xml") + " t=\"" + (target.xtype || "o") + "\">"; if ("__bindings_fn" in target) { this[this.length++] = "<__id__ t=\"d\" v=\"" + (target.__id__ || (target.__id__ = this.length)) + "\"/>"; } if ("serialize" in target) { target.serialize(this); } else
            { this.write_properties(target); } this[this.length++] = "</" + name + ">";
        } else
        { this.write_null(name, target); }
    }; this.write_array = function (name, array) {
        if (array != null) { this[this.length++] = "<" + (name || "xml") + " t=\"a\">"; for (var i = 0, _ = array.length; i < _; i++) { this.write_value("item", array[i]); } this[this.length++] = "</" + name + ">"; } else
        { this.write_null(name, array); }
    }; this.write_bindings = function (bindings) { if (bindings) { this[this.length++] = "<bindings t=\"o\">"; for (var name in bindings) { var binding = bindings[name]; this[this.length++] = "<" + name + " t=\"o\">"; binding.source && this.write_number("source", binding.source.__id__ || (binding.source.__id__ = this.length)); binding.expression && this.write_string("expression", binding.expression); binding.setter && this.write_string("setter", binding.setter); this[this.length++] = "</" + name + ">"; } this[this.length++] = "</bindings>"; } }; this.write_events = function (events) { if (events) { this[this.length++] = "<events t=\"o\">"; for (var name in events) { this.write_function(name, events[name]); } this[this.length++] = "</events>"; } };
}); (function (flyingon) {
    flyingon.absolute_url = (function () { var dom = document.createElement("a"), regex; function fn(url) { dom.href = url; return dom.href; }; if (fn("")) { return fn; } dom = document.createElement("div"); regex = /"/g; return function (url) { dom.innerHTML = "<a href='" + url.replace(regex, "%22") + "'/>"; return dom.firstChild.href; }; })(); flyingon.ready = (function () {
        var list; function execute() {
            var body = document.body; if (body) { if (list) { for (var i = 0; i < list.length; i++) { list[i++].call(list[i], body); } list.length = 0; list = null; } } else
            { setTimeout(execute, 0); }
        }; if (!document.body) { list = []; if (document.addEventListener) { document.addEventListener("DOMContentLoaded", function (event) { execute(); }, false); } if (flyingon.browser_MSIE) { document.write("<" + "script id='__flyingon_ready__' src='//:' defer='defer'></" + "script>"); document.getElementById("__flyingon_ready__").onreadystatechange = function () { if (this.readyState === "complete") { execute(); this.parentNode.removeChild(this); } }; } flyingon.addEventListener(window, "load", function (event) { execute(); }); setTimeout(execute, 0); } return function (fn, thisArg) {
            if (fn && fn.constructor === Function)
            {
                if (list) { list.push(fn, thisArg || null); } else
                { fn.call(thisArg, document.body); }
            }
        };
    })(); flyingon.ready(function () {
        var fn = !document.body.getBoundingClientRect && function (dom) {
            var x = 0, y = 0, width = dom.offsetWidth, height = dom.offsetHeight; while (dom) { x += dom.offsetLeft; y += dom.offsetTop; if (dom = dom.offsetParent) { x += dom.clientLeft; y += dom.clientTop; } } dom = flyingon.dom_view; x -= dom.scrollLeft; y -= dom.scrollTop; return {
                left: x, top: y, right: x + width, bottom: y + height
            };
        }; flyingon.dom_offset = function (dom, x, y) {
            var offset = fn ? fn.call(dom) : dom.getBoundingClientRect(); return x === undefined ? offset : {
                x: x - offset.left, y: y - offset.top
            };
        };
    }); flyingon.dom_print = (function () { var iframe; return function (dom, children_only) { iframe = iframe || (iframe = document.createElement("iframe")); iframe.style.cssText = "position:absolute;width:0px;height:0px;"; document.body.appendChild(iframe); var target = iframe.contentWindow; target.document.write(children_only ? dom.innerHTML : ""); target.document.close(); if (!children_only) { target.document.body.appendChild(dom.cloneNode(true)); } target.focus(); target.print(); document.body.removeChild(iframe); target.document.write(""); }; })(); flyingon.dom_dispose = (function () { var div = document.createElement("div"); return function (dom) { if (dom) { if (dom.parentNode) { div.appendChild(dom); } div.innerHTML = ""; } }; })();
})(flyingon); flyingon.defineClass("Event", function () { Class.create = function (type) { this.type = type; }; this.cancelBubble = false; this.defaultPrevented = false; this.defineProperty = function (name, getter, defaultValue) { if (typeof getter !== "function") { getter = new Function("return " + getter + "." + name + (defaultValue ? " || " + defaultValue : "") + ";"); } flyingon.defineProperty(this, name, getter); }; this.type = null; this.target = null; this.stopPropagation = function (dom_event) { this.cancelBubble = true; if (dom_event !== false && (dom_event = this.dom_event)) { dom_event.stopPropagation(); } }; this.stopImmediatePropagation = function (dom_event) { this.cancelBubble = true; this.defaultPrevented = true; if (dom_event !== false && (dom_event = this.dom_event)) { dom_event.preventDefault(); dom_event.stopPropagation(); } }; this.preventDefault = function (dom_event) { this.defaultPrevented = true; if (dom_event !== false && (dom_event = this.dom_event)) { dom_event.preventDefault(); } }; }); flyingon.defineClass("MouseEvent", flyingon.Event, function (base) { Class.create_mode = "merge"; Class.create = function (type, dom_event, pressdown) { this.dom = pressdown ? pressdown.dom : dom_event.target; this.dom_event = dom_event; this.ctrlKey = dom_event.ctrlKey; this.shiftKey = dom_event.shiftKey; this.altKey = dom_event.altKey; this.metaKey = dom_event.metaKey; this.timeStamp = dom_event.timeStamp; this.which = pressdown ? pressdown.which : dom_event.which; this.pageX = dom_event.pageX; this.pageY = dom_event.pageY; this.clientX = dom_event.clientX; this.clientY = dom_event.clientY; this.screenX = dom_event.screenX; this.screenY = dom_event.screenY; if (this.pressdown = pressdown) { this.distanceX = dom_event.clientX - pressdown.clientX; this.distanceY = dom_event.clientY - pressdown.clientY; } }; this.disable_click = function (disable) { flyingon.__disable_click = disable !== false; }; this.disable_dbclick = function (disable) { flyingon.__disable_dbclick = disable !== false; }; this.in_dom = function (dom) { var target = this.dom; while (target) { if (target === dom) { return true; } target = target.parentNode; } return false; }; }); flyingon.defineClass("DragEvent", flyingon.MouseEvent, function (base) { this.dragTarget = null; this.dragTargets = null; this.dropTarget = null; this.offsetLeft = 0; this.offsetTop = 0; }); flyingon.defineClass("KeyEvent", flyingon.Event, function (base) { Class.create_mode = "merge"; Class.create = function (type, dom_event) { this.dom = dom_event.target; this.dom_event = dom_event; this.ctrlKey = dom_event.ctrlKey; this.shiftKey = dom_event.shiftKey; this.altKey = dom_event.altKey; this.metaKey = dom_event.metaKey; this.timeStamp = dom_event.timeStamp; this.which = dom_event.which; }; }); flyingon.defineClass("ChangeEvent", flyingon.Event, function (base) { Class.create_mode = "merge"; Class.create = function (type, name, value, oldValue) { this.name = name; this.oldValue = oldValue; this.value = value; }; this.name = null; this.value = null; this.oldValue = null; }); flyingon.defineClass("PropertyChangeEvent", flyingon.Event, function (base) { Class.create_mode = "replace"; Class.create = function (name, value, oldValue) { this.name = name; this.value = value; this.oldValue = oldValue; }; this.type = "propertychange"; this.value = null; this.name = null; this.oldValue = null; }); flyingon.IComponent = function () {
    var id = 1; flyingon.newId = function () { return id++; }; flyingon.extend(this, flyingon.IEvent); this.defineEvent("propertychange"); flyingon.defineProperty(this, "uniqueId", function () { return this.__uniqueId || (this.__uniqueId = flyingon.newId()); }); this.__fn_define_setter = function (name, data_type, attributes) { var body = ["\n"], cache; body.push("var fields = this.__" + (attributes.style ? "styles || (this.__styles = {})" : "fields") + ", name = '" + name + "', oldValue, cache;"); if (data_type !== "object") { cache = "\n\n" + "value = "; if (attributes.style) { cache += "value == null || value === '' ? undefined : "; } switch (data_type) { case "boolean": cache += "!!value;"; break; case "int": cache += "(+value | 0);"; break; case "number": cache += "(+value || 0);"; break; case "string": cache += "'' + value;"; break; } body.push(cache); } if ((cache = attributes.minValue) != null) { body.push("\n\n"); body.push("if (value < " + cache + ") value = " + cache + ";"); } if ((cache = attributes.maxValue) != null) { body.push("\n\n"); body.push("if (value > " + cache + ") value = " + cache + ";"); } if (cache = attributes.check_code) { body.push("\n\n"); body.push(cache); } body.push("\n\n" + "if (flyingon.__initializing)\n" + "{\n\t" + "fields[name] = value;" + (attributes.set_code ? "\n\n\t" + attributes.set_code : "") + "\n\n\t" + "return this;\n" + "}\n\n\n\n"); body.push("if ((oldValue = fields[name]) !== value)\n"); body.push("{\n\n\t"); body.push("if ((cache = this.__events_data) && (cache = cache['propertychange']) && cache.length > 0)\n\t" + "{\n\t\t" + "var event = new flyingon.PropertyChangeEvent(name, value, oldValue);\n\n\t\t" + "if (this.dispatchEvent(event) === false)\n\t\t" + "{\n\t\t\t" + "return false;\n\t\t" + "}\n\n\t\t" + "value = event.value;\n\t" + "}\n\n\n\t"); body.push("fields[name] = value;"); if (cache = attributes.set_code) { body.push("\n\n\t"); body.push(cache); } if (cache = attributes.change_code) { body.push("\n\n\t"); body.push(cache); } body.push("\n\n\t" + "if (this.__bindings_fn && name in this.__bindings_fn)\n\t" + "{\n\t\t" + "flyingon.binding(this, name);\n\t" + "}"); if (attributes.layout) { body.push("\n\n\t"); body.push("this.__update_dirty = 1;\n\t"); body.push("this.__arrange_dirty = true;\n\t"); body.push("(this.__parent || this).update(true);"); } else if (attributes.arrange) { body.push("\n\n\t"); body.push("this.update(true);"); } else if (attributes.update) { body.push("\n\n\t"); body.push("this.update();"); } body.push("\n\n}\n\n"); body.push("return this;\n"); return new Function("value", body.join("")); }; var previous_attributes = null, regex_name = /\W/; this.__fn_parse_attributes = function (attributes) { if (!attributes) { return previous_attributes = {}; } if (attributes === "last-value") { return previous_attributes || (previous_attributes = {}); } var values; if (typeof attributes === "string") { values = attributes.split("|"); attributes = {}; } else if (attributes.attributes) { values = attributes.attributes.split("|"); } if (values) { for (var i = 0, _ = values.length; i < _; i++) { attributes[values[i]] = true; } } return previous_attributes = attributes; }; this.defineProperty = function (name, defaultValue, attributes) {
        if (name.match(regex_name)) { throw new flyingon.Exception("属性名不合法!"); } if (typeof defaultValue === "function" && (attributes == null || typeof attributes === "function")) { flyingon.defineProperty(this, name, defaultValue, attributes); } else
        { attributes = this.__fn_parse_attributes(attributes); var getter = attributes.getter || new Function("return this.__fields." + name + ";"), setter, data_type; if (defaultValue !== undefined) { this.__defaults[name] = defaultValue; } if (!attributes.readOnly && !(setter = attributes.setter)) { if ((data_type = typeof defaultValue) === "number" && !("" + defaultValue).indexOf(".")) { data_type = "int"; } setter = this.__fn_define_setter(name, data_type, attributes); } flyingon.defineProperty(this, name, getter, setter); if (attributes.query) { flyingon.Query.prototype[name] = new Function("value", "return this.value(" + name + ", value);"); } } return this;
    }; this.defineProperties = function (names, defaultValue, attributes) { for (var i = 0, _ = names.length; i < _; i++) { this.defineProperty(names[i], defaultValue, attributes); } return this; }; this.defineProperty("name", ""); this.defaultValue = function (name, value) { var defaults = this.__defaults; if (value === undefined) { return defaults[name]; } defaults[name] = value; return this; }; this.init = function (values) { var reader = new flyingon.SerializeReader(); this.deserialize(reader, values); reader.complete(); return this; }; this.get = function (name) { var fn = this["get_" + name]; return fn ? fn.call(this) : this[name]; }; this.set = function (name, value) {
        var fn = this["set_" + name]; if (fn) { fn.call(this, value); } else
        { this[name] = value; } return this;
    }; this.sets = function (name_values) { for (var name in name_values) { this["set_" + name](name_values[name]); } return this; }; this.binding = function (name) { flyingon.binding(this, name); }; this.setBinding = function (name, source, expression, setter) {
        if (name) { new flyingon.DataBinding(this, name).init(source, expression || name, setter); } else
        { throw new flyingon.Exception("\"name\" not allow null!"); } return this;
    }; this.clearBinding = function (name) {
        var bindings = this.__bindings; if (bindings)
        {
            if (name) { if (name in bindings) { bindings[name].dispose(); } } else
            { for (var name in bindings) { bindings[name].dispose(); } }
        } return this;
    }; this.copy = function () { var result = new this.Class(), fields1 = result.__fields, fields2 = this.__fields, names = Object.getOwnPropertyNames(fields2), name; for (var i = 0, _ = names.length; i < _; i++) { fields1[name = names[i]] = fields2[name]; } return result; }; this.stringify = function (xml) { return new flyingon[xml ? "XmlSerializeWriter" : "SerializeWriter"]().serialize(this); }; this.serialize = function (writer) { var fields = this.__fields, defaults = this.__defaults, names = Object.getOwnPropertyNames(fields), name, value; for (var i = 0, _ = names.length; i < _; i++) { if ((value = fields[name = names[i]]) !== defaults[name]) { writer.write_value(name, value); } } if (this.__bindings) { writer.write_bindings(this.__bindings); } if (this.__events) { writer.write_events(this.__events); } return this; }; this.deserialize = function (reader, data) { var names = Object.getOwnPropertyNames(data), name, fn; for (var i = 0, _ = names.length; i < _; i++) { switch (name = names[i]) { case "bindings": reader.read_bindings(this, data.bindings); break; case "events": excludes.events = this.__events = data.events; for (var name in data.events) { this.on(name, data.events[name]); } break; default: this.deserialize_property(reader, name, data[name]); break; } } if (this.__binding_source) { flyingon.binding(this); } return this; }; this.deserialize_property = function (reader, name, value) {
        var fn = this["set_" + name]; if (fn) { fn.call(this, value, true); } else
        { this[name] = value; }
    }; this.dispose = function () { var bindings = this.__bindings; if (bindings) { for (var name in bindings) { bindings[name].dispose(); } } return this; };
}; flyingon.defineClass("Component", function () { Class.create = function () { this.__fields = Object.create(this.__defaults); }; flyingon.IComponent.call(this); }); (function (flyingon) {
    var __ownerWindow, __dragTarget, __dragTargets, __drag_original, __dropTarget, __draggable, __offsetLeft, __offsetTop, __execute, __dom_body, __dom_proxy = document.createElement("div"); function start(copy) {
        var target, offset1 = flyingon.dom_offset(__dom_body = __ownerWindow.dom_children.parentNode), length = __dragTargets.length, x = __dom_body.clientLeft, y = __dom_body.clientTop; for (var i = 0; i < length; i++) { if ((target = __dragTargets[i]) && target.dom) { var dom = target.dom.cloneNode(true), offset2 = flyingon.dom_offset(target.dom); dom.style.left = offset2.left - offset1.left - x + "px"; dom.style.top = offset2.top - offset1.top - y + "px"; __dom_proxy.appendChild(dom); } } if (copy) { for (var i = length - 1; i >= 0; i--) { target = __dragTargets[i]; if (target.__parent && target.copy) { target = target.copy(); } __dragTargets[i] = target; } } else
        { __drag_original = []; for (var i = length - 1; i >= 0; i--) { __drag_original.push([target = __dragTargets[i], target.__parent, target.childIndex()]); } for (var i = length - 1; i >= 0; i--) { __dragTargets[i].remove(); } } __dom_proxy.style.cssText = "position:absolute;left:0;top:0;"; __dom_body.appendChild(__dom_proxy); __execute = true;
    }; this.dispatchEvent = function (target, type, event, pressdown) { event = new flyingon.DragEvent(type, event, pressdown); event.dragTarget = __dragTarget; event.dragTargets = __dragTargets; event.dropTarget = __dropTarget; event.offsetLeft = __offsetLeft; event.offsetTop = __offsetTop; if (pressdown) { if (__draggable === "horizontal") { event.clientY = pressdown.clientY; event.distanceY = 0; } else if (__draggable === "vertical") { event.clientX = pressdown.clientX; event.distanceX = 0; } } return target.dispatchEvent(event); }; this.start = function (target, draggable, event) { var offset = flyingon.dom_offset(target.dom, event.clientX, event.clientY); event = new flyingon.DragEvent("dragstart", event); event.dragTargets = [target]; event.offsetLeft = __offsetLeft = offset.x; event.offsetTop = __offsetTop = offset.y; if (target.dispatchEvent(event) === false) { return false; } __ownerWindow = target.get_ownerWindow(); __dragTarget = target; __draggable = draggable; __execute = false; __dragTargets = event.dragTargets || [target]; return true; }; this.move = function (event, pressdown) { if (!__execute) { if (Math.abs(event.clientX - pressdown.clientX) <= 2 && Math.abs(event.clientY - pressdown.clientY) <= 2) { return; } start(event.shiftKey); } var offset = flyingon.dom_offset(__ownerWindow.dom, event.clientX, event.clientY), target = __ownerWindow.findAt(offset.x, offset.y); if (__draggable !== "vertical") { __dom_proxy.style.left = event.clientX - pressdown.clientX + __dom_body.scrollLeft + "px"; } if (__draggable !== "horizontal") { __dom_proxy.style.top = event.clientY - pressdown.clientY + __dom_body.scrollTop + "px"; } while (target && (target === __dragTarget || !target.get_droppable())) { target = target.__parent; } if (__dropTarget !== target) { if (__dropTarget) { this.dispatchEvent(__dropTarget, "dragleave", event, pressdown); } if (__dropTarget = target) { this.dispatchEvent(target, "dragenter", event, pressdown); } } this.dispatchEvent(__dragTarget, "drag", event, pressdown); if (__dropTarget) { this.dispatchEvent(__dropTarget, "dragover", event, pressdown); } }; this.stop = function (event, pressdown, cancel) { var result = __execute, cache; if (result) { if (cancel !== true && __dropTarget) { this.dispatchEvent(__dropTarget, "drop", event, pressdown); } this.dispatchEvent(__dragTarget, "dragend", event, pressdown); if (__drag_original) { for (var i = 0, _ = __drag_original.length; i < _; i++) { if (!(cache = __drag_original[i])[0].__parent) { cache[1].__children.insert(cache[2], cache[0]); } } __drag_original = null; } __dom_body.removeChild(__dom_proxy); __dom_proxy.innerHTML = ""; __execute = false; } __ownerWindow = __dragTarget = __dragTargets = __dropTarget = __dom_body = null; return result; };
}).call(flyingon.dragdrop = Object.create(null), flyingon); (function (flyingon) {
    var style_split = Object.create(null), style_no_names = Object.create(null), registry_types = Object.create(null), registry_names = Object.create(null), original_names = Object.create(null), style_data_types = Object.create(null), style_type_fn = Object.create(null), style_pseudo_fn = Object.create(null), style_test = document.createElement("div").style, style_prefix1, style_prefix2, style_object = flyingon.style(), regex_name = /[-_](\w)/g, check_property = flyingon.__fn_check_property, selector_rule_type = { "": true, " ": true, ">": true, "+": false, "~": true }; function convert_name(name) { return name ? name.replace(regex_name, function (_, x) { return x.toUpperCase(); }) : ""; }; if (flyingon.browser_MSIE) { style_prefix1 = "ms"; style_prefix2 = "-ms-"; } else if (flyingon.browser_Firefox) { style_prefix1 = "moz"; style_prefix2 = "-moz-"; } else if (flyingon.browser_Opera) { style_prefix1 = "o"; style_prefix2 = "-o-"; } else
    { style_prefix1 = "webkit"; style_prefix2 = "-webkit-"; } flyingon.__fn_style_prefix = function (name) { name = name.indexOf("-") >= 0 ? convert_name(name) : name; if (name in style_test) { return name; } name = style_prefix1 + name.charAt(0).toUpperCase() + name.substring(1); return name in style_test ? name : null; }; flyingon.__fn_css_prefix = function (name) { var key = name.indexOf("-") >= 0 ? convert_name(name) : name; if (key in style_test) { return name; } key = style_prefix1 + key.charAt(0).toUpperCase() + key.substring(1); return key in style_test ? style_prefix2 + name : null; }; flyingon.styleSheets = (function () { this.length = 0; this.push = Array.prototype.push; this.splice = Array.prototype.splice; this.clear = function () { [].splice.call(this, 0, this.length); }; this.update = function () { var cssText = []; registry_types = Object.create(null); registry_names = Object.create(null); flyingon.style(null, style_object); for (var i = 0, _ = this.length; i < length; i++) { for (var j = 0, __ = result.length; j < __; j++) { handle_style(result[j], cssText); } } flyingon.style(cssText.join("\n"), style_object); }; return this; }).call({}); flyingon.__fn_style_declare = function (defaultWidth, defaultHeight) {
        var _this = this, items = ["top", "right", "bottom", "left"]; this.__css_types = null; this.defaultWidth = defaultWidth || 100; this.defaultHeight = defaultHeight || 21; function toUpperCase(template, values) { var result = [], length = result.length = values.length; for (var i = 0; i < length; i++) { result[i] = convert_name(template.replace("?", values[i])); } return result; }; function complex(name, getter, split_fn, template) { if (getter.constructor !== Function) { var names = [], length = names.length = getter.length; template = template || name + "-?"; for (var i = 0; i < length; i++) { names[i] = "this.get_" + convert_name(template.replace("?", getter[i])) + "()"; } getter = new Function("return [" + names.join(",") + "].join(' ');"); } style_split[name = convert_name(name)] = split_fn; flyingon.defineProperty(_this, name, getter, function (value) { var values = split_fn(value); for (var name in values) { this["set_" + name](values[name]); } }); }; function styles(template, names, defaultValue, attributes) { for (var i = 0, _ = names.length; i < _; i++) { style(template.replace("?", names[i]), defaultValue, attributes); } }; function style(name, defaultValue, attributes) { var key = convert_name(name); original_names[key] = name; attributes = _this.__fn_parse_attributes(attributes); attributes.style = true; if (attributes.no) { style_no_names[key] = true; } else if (!attributes.set_code) { attributes.set_code = "this.dom.style[name] = value !== undefined ? value : '';"; } _this.__defaults[key] = defaultValue; if ((style_data_types[key] = typeof defaultValue) === "number" && !("" + defaultValue).indexOf(".")) { style_data_types[key] = "int"; } var getter = new Function("var name = '" + key + "', value = this.__styles && this.__styles[name];\n\n" + "if (value !== undefined)\n" + "{\n\t" + "return value;\n" + "}\n\n" + "if ((value = (this.__css_values || flyingon.__fn_compute_css(this))[name]) !== undefined)\n" + "{\n\t" + "return value;\n" + "}\n\n" + "if (!(name in this.__css_values) && (value = this.__css_values[name] = flyingon.__fn_css_value(this, name)) !== undefined)\n" + "{\n\t" + "return value;\n" + "}\n\n" + "return " + (attributes.inherit ? "this.__parent ? this.__parent.get_" + key + "() : this.__defaults[name];" : "this.__css_values[name] = this.__defaults[name];\n")), setter = _this.__fn_define_setter(key, style_data_types[key], attributes); flyingon.defineProperty(_this, key, getter, setter); flyingon.Query.prototype[key] = new Function("value", "return this.value('" + key + "', value);"); }; function split_sides(template) { var regex = /\w+/g, names = toUpperCase(template, items), name_0 = names[0], name_1 = names[1], name_2 = names[2], name_3 = names[3]; return function (value) { var values = value ? ("" + value).match(regex) : []; value = {}; value[name_0] = values[0] || ""; value[name_1] = values[1] || value[name_0]; value[name_2] = values[2] || value[name_0]; value[name_3] = values[3] || value[name_1]; return value; }; }; function split_border(name) { var regex = /(\d+\S*)?\s*(\w+)?\s*([\S\s]+)?/, name0 = convert_name(name + "-width"), name1 = convert_name(name + "-style"), name2 = convert_name(name + "-color"); return function (value) { var result = {}, values = value && ("" + value).match(regex) || []; result[name0] = values[1] || ""; result[name1] = values[2] || ""; result[name2] = values[3] || ""; return result; }; }; style("layout-type", "flow", { attributes: "arrange|no", change_code: "this.dom.scrollLeft = this.dom.scrollTop = 0;" }); style("vertical", false, "last-value"); style("mirror", "none", "last-value"); style("spacing-width", "0", "arrange|no"); style("spacing-height", "0", "last-value"); complex("contentAlign", ["x", "y"], (function () { var regex1 = /left|center|right/, regex2 = /top|middle|bottom/; return function (value) { value = "" + value; return { contentAlignX: value && value.match(regex1) || "", contentAlignY: value && value.match(regex2) || "" }; }; })()); style("contentAlign-x", "left", "last-value"); style("contentAlign-y", "top", "last-value"); style("flow-width", "0", "last-value"); style("flow-height", "0", "last-value"); style("layout-rows", "3", "last-value"); style("layout-columns", "3", "last-value"); style("layout-table", "*[* * *] *[* * *] *[* * *]", "last-value"); style("layout-tables", null, "last-value"); complex("align", ["x", "y"], (function () { var regex1 = /left|center|right/, regex2 = /top|middle|bottom/; return function (value) { value = "" + value; return { alignX: value && value.match(regex1) || "", alignY: value && value.match(regex2) || "" }; }; })()); style("align-x", "center", "layout|no"); style("align-y", "middle", "last-value"); style("newline", false, "last-value"); style("column3", "before", "last-value"); style("dock", "left", "last-value"); style("row-span", 0, "last-value"); style("column-span", 0, "last-value"); style("column-index", 0, "last-value"); style("spacing-cells", 0, "last-value"); styles("?", ["top", "left"], "0", "last-value"); style("offset-x", "0", "last-value"); style("offset-y", "0", "last-value"); styles("?", ["width", "height"], "default", { attributes: "layout|no" }); styles("min-?", ["width", "height"], "0", {
            attributes: "layout|no", minValue: 0
        }); styles("max-?", ["width", "height"], "0", "last-value"); style("z-index", 0); complex("overflow", ["x", "y"], (function () { var regex = /visible|hidden|scroll|auto/g; return function (value) { var values = value ? ("" + value).match(regex) : []; return { overflowX: values[0], overflowY: values[1] || values[0] }; }; })()); styles("overflow-?", ["x", "y"], "auto", "arrange|no"); complex("margin", items, split_sides("margin-?")); styles("margin-?", items, "0", "layout|no"); complex("padding", items, split_sides("padding-?")); styles("padding-?", items, "0", "arrange|no"); complex("border", function () { return this.dom.style.border; }, (function () { var regex = /(\d+\S*)?\s*(\w+)?\s*([\S\s]+)?/, names0 = toUpperCase("border-?-width", items), names1 = toUpperCase("border-?-style", items), names2 = toUpperCase("border-?-color", items); return function (value) { var result = {}, values = value && ("" + value).match(regex), value0 = values && values[1] || "", value1 = values && values[2] || "", value2 = values && values[3] || ""; for (var i = 0; i < 4; i++) { result[names0[i]] = value0; result[names1[i]] = value1; result[names2[i]] = value2; } return result; }; })()); complex("border-width", items, split_sides("border-?-width"), "border-?-width"); styles("border-?-width", items, "0", "arrange"); complex("border-style", items, split_sides("border-?-style"), "border-?-style"); styles("border-?-style", items, "0", "arrange"); complex("border-color", items, split_sides("border-?-color"), "border-?-color"); styles("border-?-color", items, "black"); complex("border-radius", items = ["top-left", "top-right", "bottom-left", "bottom-right"], split_sides("border-?-radius"), "border-?-radius"); styles("border-?-radius", items, "0"); complex("border-left", items = ["width", "style", "color"], split_border("border-left")); complex("border-top", items, split_border("border-top")); complex("border-right", items, split_border("border-right")); complex("border-bottom", items, split_border("border-bottom")); style("direction", "ltr"); style("text-align", "left"); style("vertical-align", "middle"); style("visibility", "visible", "layout|no"); style("opacity", 1, { set_code: "this.dom.style." + (function () { if ("opacity" in style_test) { return "opacity = value;" } if (flyingon.browser_MSIE) { return "filter = 'alpha(opacity=' + (value * 100) + ')';"; } return style_prefix1 + "Opacity = value;" })() }); style("cursor", "auto", "inherit|no"); complex("outline", items, split_border("outline")); style("outline-style", "solid"); style("outline-width", 0); style("outline-color", "black"); complex("background", ["color", "image", "repeat", "attachment", "position"], (function () {
            var regex = /(none|url\([^\)]*\))|(repeat|repeat-x|repeat-y|no-repeat)|(scroll|fixed)|(left|top|center|right|bottom|\d+\S*)|\S+/g; return function (value) {
                var result = {}; if (value) { ("" + value).replace(regex, function (_, image, repeat, attachment, position, color) { color && (result.backgroundColor = color); image && (result.backgroundImage = image); repeat && (result.backgroundRepeat = repeat); attachment && (result.backgroundAttachment = attachment); position && (result.backgroundPosition = position); }); } else
                { result.backgroundColor = result.backgroundImage = result.backgroundRepeat = result.backgroundAttachment = result.backgroundPosition = ""; } return result;
            };
        })()); style("background-color", "white"); style("background-image", "", { set_code: "this.dom.style.backgroundImage = value !== undefined ? value.replace('@theme', flyingon.current_theme).replace('@language', flyingon.current_language) : '';" }); style("background-repeat", "repeat"); style("background-attachment", "scroll"); style("background-position", "center center"); style("background-origin", "padding-box"); style("background-size", "auto"); style("color", "black", "inherit"); complex("font", function () { return [this.get_fontStyle(), this.get_fontVariant(), this.get_fontWeight(), (this.__font_size = this.get_fontSize()) + "px/" + (this.__line_height = this.get_lineHeight()) + "px", this.get_fontFamily()].join(" "); }, (function () {
            var regex = /(normal|italic|oblique)?\s*(normal|small-caps)?\s*(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900|\d+\S*)?\s*(\d+\S*)?\s*\/?\s*(\d+\S*)?/; return function (value) {
                var result = {}; if (value) { (value = "" + value).replace(regex, function (all, style, variant, weight, size, lineHeight) { style && (result.fontStyle = style); variant && (result.fontVariant = variant); weight && (result.fontWeight = weight); size && (result.fontSize = size); lineHeight && (result.lineHeight = lineHeight); if (value.length > all.length) { result.fontFamily = value.substring(all.length); } }); } else
                { result.fontStyle = result.fontVariant = result.fontWeight = result.fontSize = result.lineHeight = result.fontFamily = ""; } return result;
            };
        })()); style("font-style", "normal", "inherit"); style("font-variant", "normal", "last-value"); style("font-weight", "normal", "last-value"); style("font-size", "medium", "last-value"); style("line-height", "normal", "last-value"); style("font-family", "Arial", "last-value"); style("word-spacing", "0", "last-value"); style("letter-spacing", "0", "last-value"); style("text-indent", "0", "last-value"); style("text-decoration", "none", "last-value"); style("text-overflow", "clip", "last-value"); this.serialize = function (writer) { var styles = this.__styles; if (styles) { var defaults = this.__defaults, names = Object.getOwnPropertyNames(styles), name, value; for (var i = 0, _ = names.length; i < _; i++) { if ((value = styles[name = names[i]]) !== defaults[name]) { writer.write_value(name, value); } } } return base.serialize.call(this, writer); };
    }; flyingon.change_theme = function (theme_name, files) { if (theme_name) { flyingon.current_theme = theme_name; flyingon.styleSheets.clear(); flyingon.styleSheets.update(); if (files) { for (var i = 0, _ = files.length; i < _; i++) { flyingon.ajax_get(flyingon.themes_path + theme_name + "/" + files[i], "javascript"); } } if (files = flyingon.__all_windows) { for (var i = 0, _ = files.length; i < _; i++) { update_theme(files[i]); files[i].render(); } } } }; function update_theme(target) { target.__update_dirty = 1; target.__css_types = null; if (target = target.__children) { for (var i = 0, _ = target.length; i < _; i++) { update_theme(target[i]); } } }; flyingon.__fn_compute_css = function (target) {
        var result = Object.create(null); if (!target.__has_dom_event) { flyingon.__fn_dom_event(target); } if ((target.__css_types || get_css_types(target)).css) { if (target.__css_names) { clear_css(target); target.__css_names = null; } } else
        { var style = target.__styles, names = target.__css_keys || get_css_keys(target), name, css_names, value; for (var i = 0, _ = names.length; i < _; i++) { name = names[i]; if (style && (value = style[name]) !== undefined) { continue; } if ((value = flyingon.__fn_css_value(target, name)) !== undefined) { result[name] = (css_names || (css_names = {}))[name] = value; } } if (target.__css_names) { clear_css(target, css_names); } style = target.dom.style; for (var name in result) { style[name] = result[name]; } target.__css_names = css_names; } return target.__css_values = result;
    }; flyingon.__fn_css_value = function (target, name) { var css_list = registry_names[name], css_types, cache, value; if (css_list) { css_types = target.__css_types || get_css_types(target); if (css_types.id && (value = css_list[css_types.id]) && (value = css_value(target, value))) { return value[1]; } if (css_types.length > 0) { for (var i = css_types.length - 1; i >= 0; i--) { if ((value = css_list[css_types[i]]) && (value = css_value(target, value))) { if (!cache || cache[2] < value[2]) { cache = value; } } } if (cache) { return cache[1]; } } if (css_types.type && (value = css_list[css_types.type]) && (value = css_value(target, value))) { return value[1]; } if (css_types.all && (value = css_list[css_types.all]) && (value = css_value(target, value))) { return value[1]; } } }; function css_value(target, css_values) { var keys = css_values.__weight_keys || (css_values.__weight_keys = Object.keys(css_values)); for (var i = keys.length - 1; i >= 0; i--) { var values = css_values[keys[i]], selector = values[0], end = selector.length - 1, node = selector[end]; if (node.token === ":" && (target = (style_pseudo_fn[node.name] || empty_fn)(node, target)) === undefined) { continue; } if (node.length > 0 && check_property(node, target) === false) { continue; } if (end > 0 && style_type_fn[node.type](selector, end - 1, target) === false) { continue; } return values; } }; function clear_css(target, values) { var names = target.__css_names, styles = target.__styles, style = target.dom.style, value; for (var name in names) { if (styles && (value = styles[name]) !== undefined) { continue; } if (values && name in values) { continue; } style[name] = ""; } }; function empty_fn() { }; function get_css_types(target) {
        var result = [], types = registry_types, css, name, cache; if (cache = types["@flyingon-Control"]) { result.all = "@flyingon-Control"; css = cache[0]; } else
        { css = true; } if (cache = types[name = "@" + target.css_className]) { result.type = name; css = css || cache[0]; } if (target.__class_list) { for (var i = target.__class_list.length - 1; i >= 0; i--) { if (cache = types[name = "." + target.__class_list[i]]) { result.push(name); css = css || cache[0]; } } } if ((name = target.__fields.id) && (cache = types[name = "#" + name])) { result.id = name; css = css || cache[0]; } result.css = css; target.__css_keys = target.__class_keys = null; return target.__css_types = result;
    }; function get_css_keys(target) { var result = [], keys = [], css_types = target.__css_types, types = registry_types, name; if (css_types.all) { keys.push.apply(keys, types[css_types.all][1]); } if (css_types.type) { keys.push.apply(keys, types[css_types.all][1]); } for (var i = 0, _ = css_types.length; i < _; i++) { keys.push.apply(keys, types[css_types[i]][1]); } if (css_types.id) { keys.push.apply(keys, types[css_types.id][1]); } for (var i = 0, _ = keys.length; i < _; i++) { if (!keys[name = keys[i]]) { keys[name] = true; result.push(name); } } return target.__css_keys = result; }; (function (type_fn, pseudo_fn, check_property) { function check_node(selector, index, target) { var node = selector[index]; switch (node.token) { case "@": if (target.css_className !== node.name) { return false; } break; case ".": if (!target.__class_list || !target.__class_list[node.name]) { return false; } break; case "#": if (target.id !== node.name) { return false; } break; case "": if (target.dom.tagName !== node.name) { return false; } break; case "::": if ((target = (pseudo_fn[node.name] || empty_fn)(node, target)) === undefined) { return false; } break; } if (node.length > 0 && !check_property(node, target)) { return false; } if (index > 0 && style_type_fn[node.type](selector, index - 1, target) === false) { return false; } return true; }; type_fn[""] = function (selector, index, target) { return check_node(selector, index, target); }; type_fn[" "] = function (selector, index, target) { var parent = target.__parent; while (parent) { if (check_node(selector, index, parent)) { return true; } parent = parent.__parent; } return false; }; type_fn[">"] = function (selector, index, target) { var parent = target.__parent; return parent ? check_node(selector, index, parent) : false; }; type_fn["+"] = function (selector, index, target) { var parent = target.__parent; if (parent) { var items = parent.__children, i = items.indexOf(target); if (i > 0) { return check_node(selector, index, items[--i]); } } return false; }; type_fn["~"] = function (selector, index, target) { var parent = target.__parent; if (parent) { var items = parent.__children, i = items.indexOf(target); while (i-- > 0) { if (check_node(selector, index, items[i])) { return true; } } } return false; }; pseudo_fn.empty = function (node, target) { return target.__children && target.__children.length > 0 ? undefined : target; }; pseudo_fn.before = function (node, target) { var items, index; if ((target = target.__parent) && (items = target.__children) && items.length > (index = items.indexOf(this)) + 1) { return items[index]; } }; pseudo_fn.after = function (node, target) { var items, index; if ((target = target.__parent) && (items = target.__children) && (index = items.indexOf(this) - 1) >= 0) { return items[index]; } }; pseudo_fn["first-child"] = pseudo_fn["first-of-type"] = function (node, target) { var parent, items; if ((parent = target.__parent) && (items = parent.__children) && items[0] === target && (node.name.length === 11 || target.xtype === parent.xtype)) { return parent; } }; pseudo_fn["last-child"] = pseudo_fn["last-of-type"] = function (node, target) { var parent, items; if ((parent = target.__parent) && (items = parent.__children) && items[items.length - 1] === target && (node.name.length === 10 || target.xtype === parent.xtype)) { return parent; } }; pseudo_fn["only-child"] = pseudo_fn["only-of-type"] = function (node, target) { var parent, items; if ((parent = target.__parent) && (items = parent.__children) && items.length === 1 && (node.name.length === 10 || target.xtype === parent.xtype)) { return parent; } }; pseudo_fn["nth-child"] = pseudo_fn["nth-of-type"] = function (node, target) { var parent, items; if ((parent = target.__parent) && (items = parent.__children) && items[(+node.parameters[0] || 1) - 1] === target && (node.name.length === 9 || target.xtype === parent.xtype)) { return parent; } }; pseudo_fn["nth-last-child"] = pseudo_fn["nth-last-of-type"] = function (node, target) { var parent, items; if ((parent = target.__parent) && (items = parent.__children) && items[items.length - (+node.parameters[0] || 1) - 1] === target && (node.name.length === 14 || target.xtype === parent.xtype)) { return parent; } }; })(style_type_fn, style_pseudo_fn, check_property); flyingon.defineStyle = function (styles) {
        if (styles)
        {
            var css_list = []; for (var selector in styles) { parse_selector(styles, selector, css_list); } styles = css_list; css_list = []; for (var selector in styles)
            {
                var css_style = selector.indexOf("css:") === 0, cssText = [], style = styles[selector]; if (css_style) { selector = selector.substring(4); } style = parse_style(null, style, styles, cssText, css_style); cssText = cssText.join("\n"); selector = flyingon.parse_selector(selector); if (selector.forks) { selector = split_selector(selector); for (var i = 0, _ = selector.length; i < _; i++) { css_list.push(handle_selector(selector[i], style, cssText, css_style)); } } else
                { css_list.push(handle_selector(selector, style, cssText, css_style)); }
            } flyingon.styleSheets.push(css_list); cssText = []; for (var i = 0, _ = css_list.length; i < _; i++) { handle_style(css_list[i], cssText); } flyingon.style(cssText.join(""), style_object);
        }
    }; function parse_selector(styles, selector, exports) {
        var style = styles[selector], result = {}, value; for (var name in style)
        {
            if ((value = style[name]) || value === 0 || value === false)
            {
                if (value.constructor === Object)
                {
                    if (name.indexOf("css:") === 0) { name = name.substring(4); name = (selector.indexOf("css:") !== 0 ? "css:" : "") + selector.replace("@", ".") + " " + name; } else
                    {
                        name = selector + " " + name
                    } styles[name] = value; parse_selector(styles, name, exports);
                } else if (name in style_split) { value = style_split[name](value); for (var key in value) { result[key] = value[key]; } } else
                { result[name] = value; }
            }
        } for (var name in result) { exports[selector] = result; return; }
    }; function parse_style(target, style, styles, cssText, css_style) {
        target = target || (style.load ? {} : style); for (var name in style)
        {
            var value = style[name]; if (name !== "load")
            {
                switch (style_data_types[name]) { case "boolean": value = !!value; break; case "int": value = +value | 0; break; case "number": value = +value || 0; break; default: value = "" + value; break; } target[name] = value; if (css_style || !(name in style_no_names))
                {
                    switch (name)
                    {
                        case "opacity": if (!(name in style_test))
                        {
                            if (flyingon.browser_MSIE) { cssText.push("filter:alpha(opacity=" + (value * 100) + ");"); } else
                            { cssText.push(style_prefix2 + "opacity:" + value + ";"); } return;
                        } break;
                    } cssText.push((original_names[name] || name) + ":" + value + ";");
                }
            } else
            {
                if (value.constructor === Array) { for (var i = 0, _ = value.length; i < _; i++) { parse_style(target, styles[value[i]], styles, cssText, css_style); } } else
                { parse_style(target, styles[value], styles, cssText, css_style); }
            }
        } return target;
    }; function split_selector(selector) { var result = [], forks = selector.forks, fill = 1, total = 1; for (var i = forks.length - 1; i >= 0; i--) { total *= selector[forks[i]].length; } result.length = total; for (var i = 0; i < total; i++) { result[i] = selector.slice(0); } for (var i = forks.length - 1; i >= 0; i--) { var index = forks[i], nodes = selector[index], length = nodes.length, j = 0; while (j < total) { for (var j1 = 0; j1 < length; j1++) { var node = nodes[j1]; for (var j2 = 0; j2 < fill; j2++) { result[j++][index] = node; } } } fill *= length; } return result; }; function handle_selector(selector, style, cssText, css_style) {
        var length = selector.length, value = selector[length - 1]; selector.style = style; selector.key = selector.join(""); selector.type = value.token === "::" ? "*" : value.token + value.name; selector.weight = selector_weight(selector); if (cssText)
        {
            if (selector.css_style = css_style) { selector.cssText = selector.key + "{" + cssText + "}"; } else
            {
                var values = []; for (var i = 0; i < length; i++)
                {
                    if (value = selector_rule(selector, i)) { values.push(value); } else
                    { return selector; }
                } selector.cssText = (selector.prefix || "") + values.join("") + "{" + cssText + "}";
            }
        } else
        { selector.cssText = ""; } return selector;
    }; if (flyingon.browser_MSIE && (flyingon.quirks_mode || !window.XMLHttpRequest)) { selector_rule_type[""] = selector_rule_type[">"] = selector_rule_type["~"] = false; } function selector_rule(selector, index) {
        var item = selector[index], type, result; if (item.token === "::" || item.length > 1 || (item.type && !selector_rule_type[item.type])) { return null; } result = []; if (item.type) { result.push(item.type); } result.push(item.token === "@" ? "." : item.token); result.push(item.name); if (item.length > 0)
        {
            if (item.token === "#") { result.push(".flyingon--" + item[0].name); } else
            { selector.prefix = ".flyingon "; result.push("--" + item[0].name); }
        } return result.join("");
    }; function selector_weight(selector) { var result = 0; for (var i = selector.length - 1; i >= 0; i--) { var node = selector[i]; switch (node.token) { case "": result += 1; break; case "@": case ".": case ":": result += 10; break; case "#": result += 100; break; } result += node.length * 10; } return selector.weight = result << 16; }; function handle_style(selector, cssText) {
        if (selector.css_style) { if (selector.cssText) { cssText.push(selector.cssText); } } else {
            var style = selector.style, type = selector.type, types = registry_types[type] || (registry_types[type] = [true, []]), no_names = style_no_names, weight, cache_name, cache_type, cache; if (selector.cssText !== undefined) { if (selector.cssText) { cssText.push(selector.cssText); } } else
            { types[0] = false; } for (var name in style)
            {
                weight = selector.weight; if (!(name in no_names || name in types[1])) { types[1].push(name); types[1][name] = true; } if (cache_name = registry_names[name])
                {
                    if (weight in cache_name) { weight = ++cache_name[weight]; } else
                    { cache_name[weight] = weight; } cache_type = cache_name[type] || (cache_name[type] = {});
                } else
                { cache_name = registry_names[name] = {}; cache_name[weight] = weight; cache_type = cache_name[type] = {}; } cache_type[weight] = [selector, style[name], weight];
            }
        }
    };
})(flyingon); flyingon.defineClass("Query", function () {
    var document = window.document, selector_cache = {}; Class.create = function (selector, start, repeat_id) { if (selector) { var selector = selector_cache[selector] || (selector_cache[selector] = flyingon.parse_selector(selector)), length = selector.length, items, exports, node; if (length === 1) { switch ((node = selector[0]).token) { case "#": if (repeat_id !== true) { if (exports = flyingon.query_id(node.name, start)) { this.push(exports); } return; } break; case ".": flyingon.query_class(node.name, start, this); return; } } items = start ? [start] : flyingon.__all_windows; for (var i = 0; i < length; i++) { node = selector[i]; this.__query_types[node.type || " "](node, items, exports = []); if (exports.length == 0) { return exports; } items = exports; } if (exports.length > 0) { this.push.apply(this, exports); } } }; flyingon.query_id = function (id, start) {
        var target = document.getElementById(id); if (target && (target = target.flyingon))
        {
            if (start)
            {
                var cache = target; do
                { if (cache === start) { return target; } } while (cache = cache.__parent);
            } else
            { return target; }
        }
    }; var query_class = flyingon.query_class = document.getElementsByClassName ? function (className, start, exports) { var items = (start ? start.dom : document).getElementsByClassName(className), item; exports = exports || (exports = new flyingon.Query()); for (var i = 0, _ = items.length; i < _; i++) { if (item = items[i].flyingon) { exports.push(item); } } return exports; } : function (className, start, exports) {
        exports = exports || (exports = new flyingon.Query()); if (start) { if (start.__class_list && start.__class_list[className]) { exports.push(start); } start = start.__children; } else
        { start = flyingon.__all_windows; } if (start) { for (var i = 0, _ = start.length; i < _; i++) { query_class(className, start[i], exports); } } return exports;
    }; var query_xtype = flyingon.query_xtype = function (xtype, start, exports) {
        exports = exports || (exports = new flyingon.Query()); if (start) { if (start.xtype === xtype) { exports.push(start); } start = start.__children; } else
        { start = flyingon.__all_windows; } if (start) { for (var i = 0, _ = start.length; i < _; i++) { query_xtype(xtype, start[i], exports); } } return exports;
    }; (function () {
        var pseudo_fn = {}; function check_node(node, target, exports) { switch (node.token) { case "@": if (target.css_className !== node.name) { return; } break; case ".": if (!target.__class_list || !target.__class_list[node.name]) { return; } break; case "#": if (target.id !== node.name) { return; } break; case "": if (target.dom.tagName !== node.name) { return; } break; case "::": (pseudo_fn[node.name] || pseudo_unkown)(node, target, exports); return; } if (check_property(node, target)) { exports.push(target); } }; function check_property(node, target) { var item; for (var i = 0, _ = node.length; i < _; i++) { switch ((item = node[i]).token) { case ":": switch (item.name) { case "active": case "hover": case "focus": case "disabled": case "checked": return target.__states != null && !!target.__states[item.name]; case "enabled": return !target.__states || !target.__states.disabled; } break; case "[]": var value = target.get ? target.get(item.name) : target[item.name]; switch (item.operator) { case "": return value !== undefined; case "=": return value == item.value; case "*=": return ("" + value).indexOf(item.value) >= 0; case "^=": return ("" + value).indexOf(item.value) === 0; case "$=": return (value = "" + value).lastIndexOf(item.value) === value.length - item.value.length; case "~=": return (item.regex || (item.regex = new RegExp("/(\b|\s+)" + item.value + "(\s+|\b)"))).test("" + value); case "|=": return (item.regex || (item.regex = new RegExp("/(\b|\-+)" + item.value + "(\-+|\b)"))).test("" + value); } break; } } return true; }; flyingon.__fn_check_property = check_property; this[""] = function (node, items, exports) { for (var i = 0, _ = items.length; i < _; i++) { check_node(node, items[i], exports); } }; this[","] = function (node, items, exports) { var item, fn, values; for (var i = 0, _ = node.length; i < _; i++) { item = node[i]; if (fn = this[item.type]) { fn(item, items, values = []); if (values.length > 0) { exports.push.apply(exports, values); } } } }; this[" "] = function (node, items, exports) { var children; for (var i = 0, _ = items.length; i < _; i++) { if ((children = items[i].__children) && children.length > 0) { query_cascade(node, children, exports); } } }; function query_cascade(node, items, exports) { var cache; for (var i = 0, _ = items.length; i < _; i++) { check_node(node, cache = items[i], exports); if ((cache = cache.__children) && cache.length > 0) { query_cascade(node, cache, exports); } } }; this[">"] = function (node, items, exports) { var children; for (var i = 0, _ = items.length; i < _; i++) { if ((children = items[i].__children) && children.length > 0) { for (var j = 0, __ = children.length; j < __; j++) { check_node(node, children[j], exports); } } } }; this["+"] = function (node, items, exports) { for (var i = 0, _ = items.length; i < _; i++) { var item = items[i]; if (item.__parent) { var children = item.__parent.__children, index; if (children.length > (index = children.indexOf(item) + 1)) { check_node(node, children[index], exports); } } } }; this["~"] = function (node, items, exports) { for (var i = 0, _ = items.length; i < _; i++) { var item = items[i]; if (item.__parent) { var children = item.__parent.__children; for (var j = children.indexOf(item) + 1, __ = children.length; j < __; j++) { check_node(node, children[j], exports); } } } }; function pseudo_unkown(node, target, exports) { return false; }; pseudo_fn.empty = function (node, target, exports) { if (!target.__children || target.__children.length === 0) { exports.push(target); } }; pseudo_fn.before = function (node, target, exports) { var items, item, index; if ((target = target.__parent) && (items = target.__children) && (index = items.indexOf(target) - 1) >= 0 && (item = items[index]) && (node.length === 0 || check_property(node, item))) { exports.push(item); } }; pseudo_fn.after = function (node, target, exports) { var items, item, index; if ((target = target.__parent) && (items = target.__children) && items.length > (index = items.indexOf(target) + 1) && (item = items[index]) && (node.length === 0 || check_property(node, item))) { exports.push(item); } }; pseudo_fn["first-child"] = function (node, target, exports) { var items, item; if ((items = target.__children) && items.length > 0 && (item = items[0]) && (node.length === 0 || check_property(node, item))) { exports.push(item); } }; pseudo_fn["first-of-type"] = function (node, target, exports) { var items, item; if ((items = target.__children) && items.length > 0 && (item = items[0]) && item.xtype === target.xtype && (node.length === 0 || check_property(node, item))) { exports.push(item); } }; pseudo_fn["last-child"] = function (node, target, exports) { var items, item; if ((items = target.__children) && items.length > 0 && (item = items[items.length - 1]) && (node.length === 0 || check_property(node, item))) { exports.push(item); } }; pseudo_fn["last-of-type"] = function (node, target, exports) {
            var items, item; if ((items = target.__children) && items.length > 0 && (item = items[items.length - 1]) && item.xtype === target.xtype
            (node.length === 0 || check_property(node, item))) { exports.push(item); }
        }; pseudo_fn["only-child"] = function (node, target, exports) { if ((items = target.__children) && items.length === 1 && (node.length === 0 || check_property(node, target))) { exports.push(target); } }; pseudo_fn["only-of-type"] = function (node, target, exports) { var items, item; if ((items = target.__children) && items.length === 1 && (item = items[0]) && item.xtype === target.xtype && (node.length === 0 || check_property(node, target))) { exports.push(target); } }; pseudo_fn["nth-child"] = function (node, target, exports) { var items, item, index = (+node.parameters[0] || 1) - 1; if ((items = target.__children) && items.length > index && (item = items[index]) && (node.length === 0 || check_property(node, item))) { exports.push(item); } }; pseudo_fn["nth-of-type"] = function (node, target, exports) { var items, item, index = (+node.parameters[0] || 1) - 1; if ((items = target.__children) && items.length > index && (item = items[index]) && item.xtype === target.xtype && (node.length === 0 || check_property(node, item))) { exports.push(item); } }; pseudo_fn["nth-last-child"] = function (node, target, exports) { var items, item, index = (+node.parameters[0] || 1) - 1; if ((items = target.__children) && items.length > index && (item = items[items.length - index - 1]) && (node.length === 0 || check_property(node, item))) { exports.push(item); } }; pseudo_fn["nth-last-of-type"] = function (node, target, exports) { var items, item, index = (+node.parameters[0] || 1) - 1; if ((items = target.__children) && items.length > index && (item = items[items.length - index - 1]) && item.xtype === target.xtype && (node.length === 0 || check_property(node, item))) { exports.push(item); } };
    }).call(this.__query_types = Object.create(null)); this.length = 0; this.push = Array.prototype.push; this.splice = Array.prototype.splice; this.slice = Array.prototype.slice; this.save = function () { var query = new flyingon.Query(); query.push.apply(query, this); query.__previous = this; return query; }; this.restore = function () { var result = this.__previous; if (result) { this.__previous = null; return result; } return this; }; this.first = function () { if (this.length > 1) { this.splice(1, this.length - 1); } return this; }; this.last = function () { if (this.length > 1) { this.splice(0, this.length - 2); } return this; }; this.odd = function () { return this.mod(0, 2); }; this.even = function () { return this.mod(1, 2); }; this.mod = function (mod, length) { var values = []; for (var i = 0, length = this.length; i < length; i++) { if (i % length === mod) { values.push(this[i]); } } this.length = 0; this.push.apply(this, values); return this; }; this.filter = function (fn) { var values = [], item; for (var i = 0, length = this.length; i < length; i++) { if (i % length === mod) { if (fn(item = this[i], i)) { values.push(item); } } } this.length = 0; this.push.apply(this, values); return this; }; this.value = function (name, value) {
        var item, key; if (value === undefined) { key = "get_" + name; for (var i = 0, _ = this.length; i < _; i++) { if (item = this[i]) { if (item[key]) { return item[key](); } if (name in item) { return item[name]; } } } } else
        {
            key = "set_" + name; for (var i = 0, _ = this.length; i < _; i++)
            {
                if (item = this[i])
                {
                    if (item[key]) { item[key](value) } else
                    { item[name] = value; }
                }
            } return this;
        }
    }; this.exist = function (fn) { for (var i = 0, _ = this.length; i < _; i++) { if (fn.call(this[i], i) === true) { return true; } } return false; }; this.execute = function (fn) { for (var i = 0, _ = this.length; i < _; i++) { fn.call(this[i], i); } return this; }; this.call = function (name) { var parameters = arguments.length > 1 ? this.slice.call(arguments, 1) : null, item, fn; for (var i = 0, _ = this.length; i < _; i++) { if ((item = this[i]) && (fn = item[name])) { fn.apply(item, parameters); } } return this; }; this.hasClass = function (className) { for (var i = 0, _ = this.length; i < _; i++) { var item = this[i]; if (item && "hasClass" in item && item.hasClass(className)) { return true; } } return false; }; this.addClass = function (className) { return this.apply("addClass", arguments); }; this.removeClass = function (className) { return this.apply("removeClass", arguments); }; this.toggleClass = function (className) { return this.apply("toggleClass", arguments); }; this.addEventListener = this.on = function (type, fn) { return this.apply("on", arguments); }; this.removeEventListener = this.off = function (type, fn) { return this.apply("off", arguments); };
}); flyingon.defineClass("Control", function () {
    Class.create = function (dom) { this.__fields = Object.create(this.__defaults); (this.dom = this.dom_template.cloneNode(this.dom_template.firstChild)).flyingon = this; }; flyingon.IComponent.call(this); flyingon.defineProperty(this, "ownerWindow", function () { return this.__ownerWindow || (this.__parent ? (this.__ownerWindow = this.__parent.get_ownerWindow()) : null); }); this.defineProperty("parent", function () { return this.__parent || null; }, function (value) {
        var oldValue = this.__parent; if (value !== oldValue)
        {
            if (value) { value.__children.append(this); } else
            { oldValue.__children.remove(this); }
        } return this;
    }); this.isParent = function (control) { while (control) { if (control === this) { return true; } control = control.__parent; } return false; }; this.childIndex = function (index) { var value = this.__arrange_index; if (value == null) { value = (value = this.__parent) && value.__children.indexOf(this) || -1; } if (index === undefined) { return value; } if (value >= 0 && index !== value) { this.__parent.change_index(value, index); } return this; }; this.remove = function (update_now) { var parent = this.__parent; if (update_now) { } if (parent && parent.__children) { parent.__children.remove(this); } return this; }; (function (flyingon) {
        this.defineProperty("id", "", { attributes: "layout", set_code: "this.dom.id = value;", change_code: "this.__css_types = null;" }); this.defineProperty("className", "", { attributes: "layout|query", set_code: "this.__fn_className(value);" }); this.__className0 = ""; this.__className1 = ""; this.__className2 = ""; var regex = /[\w-]+/g; function reset_class(target, names) { var list = target.__class_list = [], name; for (var i = 0, _ = names.length; i < _; i++) { if (name = names[i]) { list[name] = true; list.push(name); } } change_class(target, list.join(" ")); }; function change_class(target, name) { target.__className1 = target.__fields.className = name; if (target.dom.className !== (name = target.__className0 + name + target.__className2)) { target.dom.className = name; } if (target.__css_types) { target.__update_dirty = 1; target.__css_types = null; target.update(); } }; this.__fn_className = function (value) {
            var names = value && value.match(regex); if (names && names.length > 0) { reset_class(this, names); } else
            { this.__class_list = null; change_class(this, ""); } return this;
        }; this.hasClass = function (className) { return this.__class_list && this.__class_list[className]; }; this.addClass = function (className) {
            var length = arguments.length, list, name; if (length > 0)
            {
                if (list = this.__class_list) { for (var i = 0; i < length; i++) { if (name = arguments[i]) { if (!list[name]) { list[name] = true; list.push(name); } } } change_class(this, list.join(" ")); } else
                { reset_class(this, arguments); }
            } return this;
        }; this.removeClass = function (className) { var list = this.__class_list, name, length; if (list && (length = arguments.length) > 0) { for (var i = 0; i < length; i++) { if (name = arguments[i]) { if (list[name]) { list[name] = false; list.splice(list.indexOf(name), 1); } } } change_class(this, list.join(" ")); } return this; }; this.toggleClass = function (className) {
            var length = arguments.length, list, name; if (length > 0)
            {
                if (list = this.__class_list)
                {
                    for (var i = 0; i < length; i++)
                    {
                        if (name = arguments[i])
                        {
                            if (list[name] = !list[name]) { list.push(name); } else
                            { list.splice(list.indexOf(name), 1); }
                        }
                    } change_class(this, list.join(" "));
                } else
                { reset_class(this, arguments); }
            } return this;
        }; flyingon.__fn_style_declare.call(this);
    }).call(this, flyingon); (function (flyingon) {
        var registry_states; function class_keys(target) { var keys = [], cache; keys.push("flyingon-Control"); if (target.css_className !== "flyingon-Control") { keys.push(target.css_className); } if (cache = target.__class_list) { for (var i = 0, _ = cache.length; i < _; i++) { keys.push(cache[i]); } } keys.push(""); return target.__class_keys = keys; }; function class_name(target) {
            var states = target.__states, keys = target.__class_keys || class_keys(target), className = ""; if (states.disabled) { className = " " + keys.join("--disabled "); className += "flyingon--disabled " } else
            { if (states.checked) { className += " " + keys.join("--checked "); } if (states.focus) { className += " " + keys.join("--focus "); } if (states.hover) { className += " " + keys.join("--hover "); } if (states.active) { className += " " + keys.join("--active "); } } return target.__className0 + target.__className1 + (target.__className2 = className);
        }; function update() { for (var id in registry_states) { var target = registry_states[id], className = class_name(target); if (target.dom.className !== className) { target.dom.className = className; if (target.__update_dirty !== 1) { target.__update_dirty = 1; while ((target = target.__parent) && !target.__update_dirty) { target.__update_dirty = 2; } } } } registry_states = null; };["disabled", "active", "hover", "focus", "checked"].forEach(function (name) { this["__fn_to_" + name] = function (value) { var states = this.__states || (this.__states = {}), ownerWindow; if (states[name] !== (value = !!value)) { states[name] = value; (registry_states || (registry_states = {}))[this.__uniqueId || (this.__uniqueId = flyingon.newId())] = this; if (ownerWindow = this.__ownerWindow || this.get_ownerWindow()) { ownerWindow.__fn_registry_update(this, false, update); } } }; }, this); if (flyingon.browser_MSIE && !Object.defineProperty) { this.__fn_to_active = (function (fn) { return function (value) { fn.call(this, value); if (value) { this.dom.className = class_name(this); this.dom.focus(); } }; })(this.__fn_to_active); }
    }).call(this, flyingon); (function (flyingon) {
        this.offsetLeft = 0; this.offsetTop = 0; this.offsetWidth = 0; this.offsetHeight = 0; this.clientLeft = 0; this.clientTop = 0; this.clientWidth = 0; this.clientHeight = 0; this.contentWidth = 0; this.contentHeight = 0; this.__scrollLeft = this.__scrollTop = this.__scrollLeft_last = this.__scrollLeft_last = 0; this.__update_dirty = 1; this.defineProperty("title", "", { set_code: "this.dom.title = value;" }); this.defineProperty("scrollLeft", function () { return this.__scrollLeft; }, function (value) { (this.dom_children && this.dom_children.parentNode || this.dom).scollLeft = value; }); this.defineProperty("scrollTop", function () { return this.__scrollTop; }, function (value) { (this.dom_children && this.dom_children.parentNode || this.dom).scrollTop = value; }); var compute_dom1 = document.createElement("div"), compute_dom2 = document.createElement("div"), compute_style1 = this.__compute_style = compute_dom1.style, compute_style2 = compute_dom2.style, cssText = "position:absolute;left:0;top:0;height:0;overflow:hidden;visibility:hidden;"; compute_style1.cssText = cssText + "width:1000px;"; compute_style2.cssText = cssText + "width:0;"; compute_dom1.appendChild(compute_dom2); flyingon.ready(function (body) { body.appendChild(compute_dom1); }); this.compute_size = function (value) { if (value != 0 && value !== "0px") { compute_style2.left = value; return compute_dom2.offsetLeft; } return 0; }; this.measure = function (usable_width, usable_height, defaultWidth_to_fill, defaultHeight_to_fill, less_width_to_default, less_height_to_default, use_usable_width, use_usable_height) {
            var box = this.__boxModel, fn = this.compute_size, dom = this.dom, dom_children = this.dom_children, style = dom.style, width, height, value; if (box) { box.auto_width = box.auto_height = false; } else
            { box = this.__boxModel = {} } box.margin_width = (box.marginLeft = fn(this.get_marginLeft())) + (box.marginRight = fn(this.get_marginRight())); box.margin_height = (box.marginTop = fn(this.get_marginTop())) + (box.marginBottom = fn(this.get_marginBottom())); box.border_width = (box.borderLeft = dom.clientLeft) + (box.borderRight = fn(this.get_borderRightWidth())); box.border_height = (box.borderTop = dom.clientTop) + (box.borderBottom = fn(this.get_borderBottomWidth())); box.padding_width = (box.paddingLeft = fn(this.get_paddingLeft())) + (box.paddingRight = fn(this.get_paddingRight())); box.padding_height = (box.paddingTop = fn(this.get_paddingTop())) + (box.paddingBottom = fn(this.get_paddingBottom())); box.client_width = box.border_width + box.padding_width; box.client_height = box.border_height + box.padding_height; box.minWidth = fn(this.get_minWidth()); box.maxWidth = fn(this.get_maxWidth()); box.minHeight = fn(this.get_minHeight()); box.maxHeight = fn(this.get_maxHeight()); box.offsetX = fn(this.get_offsetX()); box.offsetY = fn(this.get_offsetY()); if (use_usable_width) { width = usable_width >= 0 ? usable_width : 0; } else
            {
                switch (value = this.get_width())
                {
                    case "default": if (defaultWidth_to_fill) { value = true; } else
                    { width = this.defaultWidth; } break; case "fill": value = true; break; case "auto": box.auto_width = value = less_width_to_default = true; break; default: width = value && value.charAt(value.length - 1) === "%" ? (this.__parent.clientWidth * parseFloat(value) / 100 | 0) : fn(value); break;
                } if (value === true) { if ((usable_width -= box.margin_width) > 0) { width = usable_width; } else if (less_width_to_default) { width = this.defaultWidth; } else { width = 0; } } if (width < box.minWidth) { width = box.minWidth; } else if (width > box.maxWidth && box.maxWidth > 0) { width = box.maxWidth; }
            } if (use_usable_height) { height = usable_height >= 0 ? usable_height : 0; } else
            {
                switch (value = this.get_height())
                {
                    case "default": if (defaultHeight_to_fill) { value = true; } else
                    { height = this.defaultHeight; } break; case "fill": value = true; break; case "auto": box.auto_height = value = less_height_to_default = true; break; default: height = value && value.charAt(value.length - 1) === "%" ? (this.__parent.clientHeight * parseFloat(value) / 100 | 0) : fn(value); break;
                } if (value === true) { if ((usable_height -= box.margin_height) > 0) { height = usable_height; } else if (less_height_to_default) { height = this.defaultHeight; } else { height = 0; } } if (height < box.minHeight) { height = box.minHeight; } else if (height > box.maxHeight && box.maxHeight > 0) { height = box.maxHeight; }
            } style.visibility = width > 0 && height > 0 && this.__visibility !== "hidden" ? "visible" : "hidden"; if (!dom_children) { style.paddingLeft = box.paddingLeft + "px"; style.paddingTop = box.paddingTop + "px"; style.paddingRight = box.paddingRight + "px"; style.paddingBottom = box.paddingBottom + "px"; } this.offsetWidth = width; this.offsetHeight = height; if (!this.box_border_sizing) { width -= box.border_width; height -= box.border_height; if (!dom_children) { width -= box.padding_width; height -= box.padding_height; } if (width < 0) { width = 0; } if (height < 0) { height = 0; } } style.width = width + "px"; style.height = height + "px"; if (this.before_measure && (value = this.before_measure(box))) { resize_change.call(this, style, box, width, height, value); } if ((box.auto_width || box.auto_height) && (value = this.__fn_measure_auto(box))) { resize_change.call(this, style, box, width, height, value); } this.__fn_measure_client(box); if (this.after_measure) { this.after_measure(box); } return {
                width: this.offsetWidth + box.margin_width, height: this.offsetHeight + box.margin_height
            };
        }; function resize_change(style, box, width, height, change) { var value; if (value = +change.width) { this.offsetWidth += value; if (this.offsetWidth < box.minWidth) { value += box.minWidth - this.offsetWidth; this.offsetWidth = box.minWidth; } else if (box.maxWidth > 0 && this.offsetWidth > box.maxWidth) { value += box.maxWidth - this.offsetWidth; this.offsetWidth = box.maxWidth; } style.width = width + value + "px"; } if (value = +change.height) { this.offsetHeight += value; if (this.offsetHeight < box.minHeight) { value += box.minHeight - this.offsetHeight; this.offsetHeight = box.minHeight; } else if (box.maxHeight > 0 && this.offsetHeight > box.maxHeight) { value += box.maxHeight - this.offsetHeight; this.offsetHeight = box.maxHeight; } style.height = height + value + "px"; } }; this.__fn_measure_auto = function (box, change) { var children = this.dom.children, x = 0, y = 0, item, cache; for (var i = 0, _ = children.length; i < _; i++) { item = children[i]; if ((cache = item.offsetLeft + item.offsetWidth) > x) { x = cache; } if ((cache = item.offsetTop + item.offsetHeight) > x) { y = cache; } } if (box.auto_width) { change.width = x + box.client_width - this.offsetWidth; } if (box.auto_height) { change.height = y + box.client_height - this.offsetHeight; } }; this.__fn_measure_client = function (box) {
            var dom = this.dom, dom_children = this.dom_children, x, y, width, height; x = box.borderLeft + box.paddingLeft; y = box.borderTop + box.paddingTop; if (dom_children && (dom_children = dom_children.parentNode))
            {
                width = dom_children.offsetWidth - box.padding_width; height = dom_children.offsetHeight - box.padding_height; if (dom_children === dom) { width -= box.border_width; height -= box.border_height; } else
                {
                    do
                    { x += dom_children.offsetLeft + dom_children.clientLeft; y += dom_children.offsetTop + dom_children.clientTop; } while ((dom_children = dom_children.parentNode) && dom_children !== dom)
                }
            } else
            { width = this.offsetWidth - box.border_width - box.padding_width; height = this.offsetHeight - box.border_height - box.padding_height; } this.clientLeft = x; this.clientTop = y; this.clientWidth = width > 0 ? width : 0; this.clientHeight = width > 0 ? height : 0;
        }; this.locate = function (x, y, align_width, align_height) {
            var parent = this.__parent, box = this.__boxModel, style = this.dom.style, value; if (align_width > 0 && (value = align_width - box.margin_width - this.offsetWidth)) { switch (this.get_alignX()) { case "center": x += value >> 1; break; case "right": x += value; break; } } if (align_height > 0 && (value = align_height - box.margin_height - this.offsetHeight)) { switch (this.get_alignY()) { case "middle": y += value >> 1; break; case "bottom": y += value; break; } } style.left = (x += box.offsetX + box.marginLeft) + "px"; style.top = (y += box.offsetY + box.marginTop) + "px"; return {
                x: (this.offsetLeft = x) + this.offsetWidth + box.marginRight, y: (this.offsetTop = y) + this.offsetHeight + box.marginBottom
            };
        }; this.update = function (arrange, update_now) { if (this.__boxModel && this.__update_dirty !== 1) { var parent = this; this.__update_dirty = 1; while ((parent = parent.__parent) && !parent.__update_dirty) { parent.__update_dirty = 1; } if (arrange) { this.__arrange_dirty = true; } (this.__ownerWindow || this.get_ownerWindow()).__fn_registry_update(this, update_now); } }; this.render = function () { if (this.__update_dirty === 1) { flyingon.__fn_compute_css(this); } }; this.__fn_resize_side = function (resizable, event) {
            var offset = flyingon.dom_offset(this.dom, event.clientX, event.clientY), style = this.dom.style, width = this.offsetWidth, height = this.offsetHeight, resize; if (resizable !== "vertical") { if (offset.x >= 0 && offset.x < 4) { resize = { left: true, cursor: "w-resize" }; } else if (offset.x <= width && offset.x > width - 4) { resize = { right: true, cursor: "e-resize" }; } } if (resizable !== "horizontal")
            {
                if (offset.y >= 0 && offset.y < 4)
                {
                    if (resize) { resize.cursor = resize.left ? "nw-resize" : "ne-resize"; resize.top = true; } else
                    { resize = { top: true, cursor: "n-resize" }; }
                } else if (offset.y <= height && offset.y > height - 4)
                {
                    if (resize) { resize.cursor = resize.left ? "sw-resize" : "se-resize"; resize.bottom = true; } else
                    { resize = { bottom: true, cursor: "s-resize" }; }
                }
            } return resize;
        }; this.__fn_resize = function (side, event, pressdown) { var layout = this.__parent && this.__parent.__layout, x = event.clientX - pressdown.clientX, y = event.clientY - pressdown.clientY; if (side.left && layout && !layout.absolute) { this.__fn_resize_value(pressdown, "left", x); this.__fn_resize_value(pressdown, "width", -x); } else if (side.right) { this.__fn_resize_value(pressdown, "width", x); } if (side.top && layout && !layout.absolute) { this.__fn_resize_value(pressdown, "top", y); this.__fn_resize_value(pressdown, "height", -y); } else if (side.bottom) { this.__fn_resize_value(pressdown, "height", y) } event.stopPropagation(false); }; var regex_resize = /[a-zA-Z%*]+/, resize_names = { left: "offsetLeft", top: "offsetTop", width: "offsetWidth", height: "offsetHeight" }; this.__fn_resize_value = function (start, name, change) {
            var cache = start[name]; if (!cache) { start = start[name] = this.__fn_unit_scale(this["get_" + name](), this[resize_names[name]]); start.reverse = this.__parent && this.__arrange_mirror !== "none"; } else
            { start = cache; } cache = start.value + (start.scale === 1 ? change : (change * start.scale * 100 | 0) / 100); this["set_" + name]((cache > 0 ? cache : 0) + start.unit);
        }; this.__fn_unit_scale = function (value, px) {
            var unit = value.match(regex_resize); if (!unit || unit === "px" || (unit = unit[0]).length !== 2) { return { value: px, unit: "px", scale: 1 }; } return {
                unit: unit, value: (value = parseFloat(value) || 0), scale: (value / px) || 1
            };
        };
    }).call(this, flyingon); (function (flyingon) { this.__fn_event_control = function () { var target = this, parent = this; while (parent = parent.__parent) { if (!target.__additions) { target = parent; } } return target; }; this.defineEvents("mousedown", "mousemove", "click", "dblclick", "mouseup", "mouseover", "mouseout", "mousewheel"); this.defineEvents("dragstart", "drag", "dragend", "dragenter", "dragover", "dragleave", "drop"); this.defineEvents("keydown", "keypress", "keyup"); this.defineEvents("focus", "blur", "validate"); this.defineEvent("scroll"); this.defineEvents("contextmneu"); }).call(this, flyingon); (function (flyingon) { this.defineProperty("accesskey", null); this.defineProperty("enabled", true, { change_code: "this.__fn_to_disabled(!value);" }); this.defineProperty("resizable", "none"); this.defineProperty("draggable", "none"); this.defineProperty("droppable", false); }).call(this, flyingon); (function (flyingon) {
        this.query = function (selector) {
            return
        }; this.query_id = function (id) { return flyingon.query_id(id, this); }; this.query_class = function (className) { return flyingon.query_class(className, this); }; this.query_xtype = function (xtype) { return flyingon.query_xtype(xtype, this); }; this.focus = function (event) { this.dom.focus(); return this; }; this.blur = function (event) { this.dom.blur(); return this; }; this.beginInit = function () { flyingon.__initializing = true; return this; }; this.endInit = function () { flyingon.__initializing = false; return this; }; this.dispose = function () { var cache = this.__bindings; if (cache) { for (var name in cache) { cache[name].dispose(); } } if (this.__has_dom_event) { flyingon.__fn_dom_event(this, true); } flyingon.dom_dispose(cache); return this; };
    }).call(this, flyingon); (function (flyingon) {
        this.create_dom_template = function (tagName, cssText, attributes) {
            var dom = this.dom_template = document.createElement(tagName); dom.className = initialize_class.call(this, Class) + dom.className; if (attributes)
            {
                if (attributes.constructor === String) { dom.innerHTML = attributes; } else
                {
                    for (var name in attributes)
                    {
                        if (name === "innerHTML") { dom.innerHTML = attributes[name]; } else
                        { dom.setAttribute(name, attributes[name]); }
                    }
                }
            } if (flyingon.browser_WebKit) { dom.setAttribute("style", "position:absolute;" + (cssText || "")); } else
            { dom.style.cssText = "position:absolute;" + (cssText || ""); } flyingon.ready(function (body) { var dom = document.createElement(tagName = tagName || "div"); if (attributes && attributes.type) { dom.type = attributes.type; } dom.style.cssText = "position:absolute;width:100px;height:0;padding:1px;visibility:hidden;"; body.appendChild(dom); this.box_border_sizing = dom.offsetWidth === 100; flyingon.dom_dispose(dom); }, this); return dom;
        }; function initialize_class(Class) { if (this.xtype && this.xtype !== "flyingon.Control") { return this.__className0 = "flyingon-Control " + (Class.css_className = this.css_className = this.xtype.replace(/\./g, "-")) + " "; } Class.css_className = this.css_className = "flyingon-Control"; return this.__className0 = "flyingon-Control "; }; this.create_dom_template("div"); this.__Class_initialize__ = function (Class) { if (!Class.css_className) { (this.dom_template = this.dom_template.cloneNode(true)).className = initialize_class.call(this, Class); } }; this.__textContent_name = "textContent" in this.dom_template ? "textContent" : "innerText"; this.__fn_dom_control = (function () {
            var host = document.documentElement; return function (dom) {
                while (dom)
                {
                    if (dom.flyingon) { return dom.flyingon; } dom = dom.parentNode
                } return host.flyingon;
            };
        })(); this.__fn_from_dom = function (dom) {
            var cache; dom.style.position = "absolute"; if (this.dom && this.dom.firstChild) { cache = this.dom.children; for (var i = 0, _ = cache.length; i < _; i++) { dom.appendChild(cache[0]); } } this.dom = dom; if (dom.id) { this.__fields.id = dom.id; } if (dom.className) { this.__fn_className(dom.className); } else
            { dom.className = this.__className0; } return dom.flyingon = this;
        };
    }).call(this, flyingon);
}); flyingon.defineClass("ControlCollection", function (base) {
    Class.create = function (target, control_type) { this.target = target; this.control_type = control_type || flyingon.Control; }; var push, splice; this.length = 0; (function (Array) { push = Array.push; splice = Array.splice; this.forEach = Array.forEach; this.indexOf = Array.indexOf; this.lastIndexOf = Array.lastIndexOf; }).call(this, Array.prototype); this.change_index = function (old_index, new_index) { var item; if (old_index !== new_index && (item = this[old_index])) { splice.call(this, old_index, 1); if (new_index > this.length) { new_index = this.length; } splice.call(this, new_index, 0, item); } }; this.append = function (item) { var length = arguments.length, change; if (length > 0) { change = !flyingon.__initializing; for (var i = 0; i < length; i++) { validate(this, arguments[i], change); } push.apply(this, arguments); this.target.__dom_dirty = true; } }; this.insert = function (index, item) { var length = arguments.length, change; if (length > 1) { change = !flyingon.__initializing; if (index < 0) { index = 0; } else if (index >= this.length) { index = this.length; } for (var i = 1; i < length; i++) { validate(this, item = arguments[i], change); splice.call(this, index++, 0, item); } this.target.__dom_dirty = true; } }; this.remove = function (item) { var parent, index; for (var i = 0, _ = arguments.length; i < _; i++) { if ((item = arguments[i]) && (index = this.indexOf(item)) >= 0) { remove_item(parent || (parent = this.target), item); splice.call(this, index, 1); } } if (parent) { parent.update(true); } }; this.removeAt = function (index, length) { if (this.length > index) { var parent = this.target; if (!(length > 0)) { length = 1; } for (var i = 0; i < length; i++) { remove_item(parent, this[index + i]); } splice.call(this, index, length); parent.update(true); } }; function validate(target, item, change) {
        if (item instanceof target.control_type)
        {
            var parent = target.target, oldValue = item.__parent; if (oldValue)
            {
                if (oldValue !== parent) { item.remove(); } else
                { splice.call(target, target.indexOf(item), 1); }
            } item.__parent = parent; item.__ownerWindow = parent.__ownerWindow; if (change) { item.dispatchEvent(new flyingon.PropertyChangeEvent("parent", parent, oldValue)); parent.update(true); } return true;
        } throw new flyingon.Exception("只能添加" + target.control_type.xtype + "类型的子控件!");
    }; this.clear = function () { var parent = this.target, length = this.length; for (var i = 0; i < length; i++) { remove_item(parent, this[i]); } splice.call(this, 0, length); parent.update(true); }; function remove_item(parent, item) { var dom = item.dom; item.__parent = null; if (dom && dom.parentNode) { dom.parentNode.removeChild(dom); clear_cache(item); } if (!flyingon.__initializing) { item.dispatchEvent(new flyingon.PropertyChangeEvent("parent", null, parent)); } }; function clear_cache(item) { item.__ownerWindow = item.__events_cache = item.__arrange_index = item.__css_types = null; item.__update_dirty = 1; if ((item = item.__children) && item.length > 0) { for (var i = 0, _ = item.length; i < _; i++) { clear_cache(item[i]); } } };
}); (function (flyingon) {
    var layouts = flyingon.layouts = {}; var layout_base = flyingon.defineClass(function () {
        this.vertical = false; this.mirror = "none"; flyingon.ready(function (body) { var dom = document.createElement("div"); dom.style.cssText = "position:absolute;overflow:scroll;width:100px;height:100px;border:0;padding:0;visibility:hidden;"; dom.innerHTML = "<div style='position:relative;width:200px;height:200px;'></div>"; body.appendChild(dom); this.scroll_width = dom.offsetWidth - dom.clientWidth; this.scroll_height = dom.offsetHeight - dom.clientHeight; flyingon.dom_dispose(dom); }, this); this.__fn_arrange = function (target, width, height) {
            var children = target.__children; if (children && children.length > 0)
            {
                var box = target.__boxModel, dom = target.dom_children, style2 = dom.style, style1 = (dom = dom.parentNode).style, items = [], item, cache; this.vertical = target.get_vertical(); for (var i = 0, _ = children.length; i < _; i++)
                {
                    var item = children[i]; item.__arrange_index = i; if (item.__visible = (item.__visibility = item.get_visibility()) !== "collapse") { items.push(item); } else
                    { target.__fn_hide(item); }
                } target.contentWidth = width; target.contentHeight = height; this.arrange(target, items, width, height); if ((this.mirror = target.__arrange_mirror = target.get_mirror()) !== "none") { mirror(items, this.mirror, target.contentWidth, target.contentHeight); } if (target.contentWidth <= width) { style1.overflowX = "hidden"; } else
                { switch (style1.overflowX = target.get_overflowX()) { case "auto": case "scroll": height -= this.scroll_height; break; } style2.left = box.paddingLeft + "px"; } if (target.contentHeight <= height) { style1.overflowY = "hidden"; } else
                { switch (style1.overflowY = target.get_overflowY()) { case "auto": case "scroll": width -= this.scroll_width; break; } style2.top = box.paddingTop + "px"; } if (target.contentWidth < width) { switch (target.get_contentAlignX()) { case "left": style2.left = box.paddingLeft + "px"; break; case "center": style2.left = ((width - target.contentWidth) >> 1) + box.paddingLeft + "px"; break; default: style2.left = width - target.contentWidth + box.paddingLeft + "px"; break; } } else
                { style2.left = box.paddingLeft + "px"; } if (target.contentHeight <= height) { switch (target.get_contentAlignY()) { case "top": style2.top = box.paddingTop + "px"; break; case "middle": style2.top = ((height - target.contentHeight) >> 1) + box.paddingTop + "px"; break; default: style2.top = height - target.contentHeight + box.paddingTop + "px"; break; } } else
                { style2.top = box.paddingTop + "px"; } style2.width = target.contentWidth + box.paddingRight + "px"; style2.height = target.contentHeight + box.paddingBottom + "px"; if (target.contentWidth > width && dom.scrollWidth - box.padding_width < target.contentWidth) { style2.width = target.contentWidth + box.padding_width + "px"; } if (target.contentHeight > height && dom.scrollHeight - box.padding_height < target.contentHeight) { style2.height = target.contentHeight + box.padding_height + "px"; }
            } else
            { target.contentWidth = 0; target.contentHeight = 0; }
        }; function mirror(items, mirror, width, height) { var item, style; switch (mirror) { case "x": for (var i = 0, _ = items.length; i < _; i++) { style = (item = items[i]).dom.style; style.top = (item.offsetTop = height - item.offsetTop - item.offsetHeight) + "px"; } break; case "y": for (var i = 0, _ = items.length; i < _; i++) { style = (item = items[i]).dom.style; style.left = (item.offsetLeft = width - item.offsetLeft - item.offsetWidth) + "px"; } break; case "center": for (var i = 0, _ = items.length; i < _; i++) { style = (item = items[i]).dom.style; style.left = (item.offsetLeft = width - item.offsetLeft - item.offsetWidth) + "px"; style.top = (item.offsetTop = height - item.offsetTop - item.offsetHeight) + "px"; } break; } }; this.arrange = function (target, items, width, height) { }; this.__fn_splitter = function (splitter, width, height, vertical) { var styles = splitter.__styles || (splitter.__styles = {}); styles.cursor = vertical ? "n-resize" : "w-resize"; styles.width = vertical ? width : (styles.width = undefined, splitter.get_width()); styles.height = vertical ? (styles.height = undefined, splitter.get_height()) : height; }; this.__fn_resize = function (target, start, change) { change = start.scale === 1 ? change : ((change * start.scale * 100 | 0) / 100); target[start.vertical ? "set_height" : "set_width"](start.value + change + start.unit); }; this.__fn_resize_start = function (target, vertical, splitter) { var style = target[vertical ? "get_height" : "get_width"](), value = target[vertical ? "offsetHeight" : "offsetWidth"], start = target.__fn_unit_scale(style, value); start.reverse = !vertical && this.mirror !== "none"; start.vertical = vertical; return start; }; this.__fn_index = function (target, x, y) { var items = target.__render_items || target.__children, item; x += target.__scrollLeft - target.clientLeft; y += target.__scrollTop - target.clientTop; for (var i = 0, _ = items.length; i < _; i++) { if ((item = items[i]).__visible && item.offsetLeft <= x && item.offsetTop <= y && item.offsetLeft + item.offsetWidth >= x && item.offsetTop + item.offsetHeight >= y) { return item.__arrange_index >= 0 ? item.__arrange_index : i; } } return -1; }; this.__fn_collapse = function (target) { return this.__fn_collapse_mirror(this.vertical ? "top" : "left"); }; var reverse = { left: "right", top: "bottom", right: "left", bottom: "top" }; this.__fn_collapse_mirror = function (value) { switch (this.mirror) { case "x": return value === "top" || value === "bottom" ? reverse[value] : value; case "y": return value === "left" || value === "right" ? reverse[value] : value; case "center": return reverse[value]; default: return value; } };
    }); flyingon.defineLayout = function (name, layout_fn) { var layout = new layout_base(); if (!layout_fn) { layout_fn = name; name = null; } layout_fn.call(layout, layout_base.prototype); if (name) { layout.name = name; layouts[name] = layout; } return layout; }; flyingon.defineLayout("flow", function (base) {
        function arrange1(target, items, width, height, fixed) {
            var spacingWidth = target.compute_size(target.get_spacingWidth()), spacingHeight = target.compute_size(target.get_spacingHeight()), contentWidth = 0, contentHeight = 0, align_height = target.compute_size(target.get_flowHeight()), x = 0, y = 0, item, size, offset; for (var i = 0, _ = items.length; i < _; i++)
            {
                item = items[i]; if (x > 0)
                {
                    if (item.get_newline()) { x = 0; y = contentHeight + spacingHeight; } else
                    { x += spacingWidth; }
                } size = item.measure(width > x ? width - x : width, align_height, false, false, true, false).width; if (x > 0 && x + size > width) { x = 0; y = contentHeight + spacingHeight; } offset = item.locate(x, y, null, align_height); if (offset.y > height && !fixed) { switch (target.get_overflowY()) { case "auto": case "scroll": return arrange1.call(this, target, items, width - this.scroll_width, height, true); default: fixed = true; break; } } if ((x = offset.x) > contentWidth) { contentWidth = offset.x; } if (offset.y > contentHeight) { contentHeight = offset.y; }
            } target.contentWidth = contentWidth; target.contentHeight = contentHeight;
        }; function arrange2(target, items, width, height, fixed) {
            var spacingWidth = target.compute_size(target.get_spacingWidth()), spacingHeight = target.compute_size(target.get_spacingHeight()), x = 0, y = 0, align_width = target.compute_size(target.get_flowWidth()), contentWidth = 0, contentHeight = 0, item, size, offset; for (var i = 0, _ = items.length; i < _; i++)
            {
                item = items[i]; if (y > 0)
                {
                    if (item.get_newline()) { y = 0; x = contentWidth + spacingWidth; } else
                    { y += spacingHeight; }
                } size = item.measure(align_width, height > y ? height - y : height, false, false, true, false).height; if (y > 0 && y + size > height) { y = 0; x = contentWidth + spacingWidth; } offset = item.locate(x, y, align_width); if (offset.x > width && !fixed) { switch (target.get_overflowX()) { case "auto": case "scroll": return arrange2.call(this, target, items, width, height - this.scroll_height, true); default: fixed = true; break; } } if (offset.x > contentWidth) { contentWidth = offset.x; } if ((y = offset.y) > contentHeight) { contentHeight = offset.y; }
            } target.contentWidth = contentWidth; target.contentHeight = contentHeight;
        }; this.arrange = function (target, items, width, height) { (this.vertical ? arrange2 : arrange1).apply(this, arguments); }; this.__fn_splitter = function (splitter, width, height, vertical) {
            var target = splitter.__parent, box; if (target && (target = target.__children[splitter.__arrange_index - 1]))
            {
                box = target.__boxModel; if (vertical) { arguments[1] = target.offsetWidth + box.margin_width + "px"; } else
                { arguments[2] = target.offsetHeight + box.margin_height + "px"; } base.__fn_splitter.apply(this, arguments);
            }
        };
    }); flyingon.defineLayout("line", function (base) { this.arrange = function (target, items, width, height) { (this.vertical ? arrange2 : arrange1).apply(this, arguments); }; function arrange1(target, items, width, height, fixed) { var spacingWidth = target.compute_size(target.get_spacingWidth()), x = 0, y = height, item, offset; for (var i = 0, _ = items.length; i < _; i++) { item = items[i]; if (x > 0) { x += spacingWidth; } item.measure(width - x, height, false, true, true, false); offset = item.locate(x, 0, null, height); if ((x = offset.x) > width && !fixed) { switch (target.get_overflowX()) { case "auto": case "scroll": return arrange1.call(this, target, items, width, height - this.scroll_height, true); default: fixed = true; break; } } if (offset.y > y) { y = offset.y; } } target.contentWidth = x; target.contentHeight = y; }; function arrange2(target, items, width, height, fixed) { var spacingHeight = target.compute_size(target.get_spacingHeight()), x = width, y = 0, item, offset; for (var i = 0, _ = items.length; i < _; i++) { item = items[i]; if (y > 0) { y += spacingHeight; } item.measure(width, height - y, true, false, false, true); offset = item.locate(0, y, width); if ((y = offset.y) > height && !fixed) { switch (target.get_overflowY()) { case "auto": case "scroll": return arrange2.call(this, target, items, width - this.scroll_width, height, true); default: fixed = true; break; } } if (offset.x > x) { x = offset.x; } } target.contentWidth = x; target.contentHeight = y; }; }); flyingon.defineLayout("column3", function (base) {
        function arrange1(target, items, width, height) {
            var spacingWidth = target.compute_size(target.get_spacingWidth()), length = items.length, x = 0, y = height, size = width, right = width, list1 = [], list2 = [], item, type, offset, cache; for (var i = 0; i < length; i++)
            {
                item = items[i]; if (item.__visible = size > 0) { switch (item instanceof flyingon.Splitter ? type : (type = item.get_column3())) { case "before": cache = item.measure(size, height, false, true).width; offset = item.locate(x, 0); x += cache + spacingWidth; break; case "after": list1.push(item); break; default: list2.push(item); continue; } size = right - x; if (offset.y > y) { y = offset.y; } } else
                { target.__fn_hide(item); }
            } for (var i = list1.length - 1; i >= 0; i--)
            {
                item = list1[i]; if (size > 0) { cache = item.measure(size, height, false, true).width; offset = item.locate(right -= cache, 0); right -= spacingWidth; size = right - x; if (offset.y > y) { y = offset.y; } } else
                { target.__fn_hide(item); }
            } length = list2.length; for (var i = 0; i < length; i++)
            {
                item = list2[i]; if (size > 0) { cache = item.measure(size, height, true, true); offset = item.locate(x, 0); x += cache + spacingWidth; size = right - x; if (offset.y > y) { y = offset.y; } } else
                { target.__fn_hide(item); }
            } this.contentHeight = y;
        }; function arrange2(target, items, width, height) {
            var spacingHeight = target.compute_size(target.get_spacingHeight()), length = items.length, x = width, y = 0, size = height, bottom = height, list1 = [], list2 = [], item, type, offset, cache; for (var i = 0; i < length; i++)
            {
                item = items[i]; if (size > 0) { switch (item instanceof flyingon.Splitter ? type : (type = item.get_column3())) { case "before": cache = item.measure(width, size, true, false).height; offset = item.locate(0, y); y += cache + spacingHeight; break; case "after": list1.push(item); break; default: list2.push(item); continue; } size = bottom - y; if (offset.x > x) { x = offset.x; } } else
                { target.__fn_hide_after(items, i); break; }
            } for (var i = list1.length - 1; i >= 0; i--)
            {
                item = list1[i]; if (size > 0) { cache = item.measure(width, size, true, false).height; offset = item.locate(0, bottom -= cache); bottom -= spacingHeight; size = bottom - y; if (offset.x > x) { x = offset.x; } } else
                { target.__fn_hide(item); }
            } length = list2.length; for (var i = 0; i < length; i++)
            {
                item = list2[i]; if (size > 0) { cache = item.measure(width, size, true, true).height; offset = item.locate(0, y); y += cache + spacingHeight; size = bottom - y; if (offset.x > x) { x = offset.x; } } else
                { target.__fn_hide(item); }
            } this.contentWidth = x;
        }; this.arrange = function (target, items, width, height) { (this.vertical ? arrange2 : arrange1).apply(this, arguments); }; this.__fn_resize_start = function (target, vertical, splitter) { var start = base.__fn_resize_start.apply(this, arguments), type = target.get_column3(); start.reverse = this.mirror !== "none" ? type === "before" : type === "after"; return start; }; this.__fn_collapse = function (target) { var column3 = target.get_column3(); column3 = this.vertical ? (column3 === "after" ? "bottom" : "top") : (column3 === "after" ? "right" : "left"); return this.__fn_collapse_mirror(column3); };
    }); flyingon.defineLayout("dock", function (base) {
        this.arrange = function (target, items, width, height) {
            var spacingWidth = target.compute_size(target.get_spacingWidth()), spacingHeight = target.compute_size(target.get_spacingHeight()), length = items.length, x = 0, y = 0, size1 = width, size2 = height, right = width, bottom = height, list = [], item, cache; for (var i = 0; i < length; i++)
            {
                item = items[i]; if (size1 > 0 && size2 > 0) { switch (item.get_dock()) { case "left": cache = item.measure(size1, size2, false, true).width; item.locate(x, y); if ((size1 = right - (x += cache + spacingWidth)) < 0) { size1 = 0; } break; case "top": cache = item.measure(size1, size2, true, false).height; item.locate(x, y); if ((size2 = bottom - (y += cache + spacingHeight)) < 0) { size2 = 0; } break; case "right": cache = item.measure(size1, size2, false, true).width; item.locate(right -= cache, y); if ((size1 = (right -= spacingWidth) - x) < 0) { size1 = 0; } break; case "bottom": cache = item.measure(size1, size2, true, false).height; item.locate(x, bottom -= cache); if ((size2 = (bottom -= spacingHeight) - y) < 0) { size2 = 0; } break; default: list.push(item); break; } } else
                { target.__fn_hide_after(items, i); break; }
            } cache = size1 > 0 && size2 > 0; for (var i = 0, length = list.length; i < length; i++)
            {
                item = list[i]; if (cache) { item.measure(size1, size2, true, true); item.locate(x, y); } else
                { target.__fn_hide(item); }
            }
        }; this.__fn_splitter = function (splitter, width, height, vertical) { var target = splitter.__parent; if (target && (target = target.__children[splitter.__arrange_index - 1])) { switch (target.get_dock()) { case "top": case "bottom": arguments[3] = true; break; default: arguments[3] = false; break; } base.__fn_splitter.apply(this, arguments); } }; this.__fn_resize_start = function (target, vertical, splitter) {
            var mirror = this.mirror, dock = target.get_dock(), start = base.__fn_resize_start.call(this, target, vertical = dock === "top" || dock === "bottom", splitter); if (vertical) { start.reverse = mirror === "x" || mirror === "center" ? dock === "top" : dock === "bottom"; } else
            { start.reverse = mirror === "y" || mirror === "center" ? dock === "left" : dock === "right"; } return start;
        }; this.__fn_collapse = function (target) { var dock = target.get_dock(); return this.__fn_collapse_mirror(dock !== "none" ? dock : "top"); };
    }); flyingon.defineLayout("cascade", function (base) { this.arrange = function (target, items, width, height) { for (var i = 0, _ = items.length; i < _; i++) { var item = items[i]; item.measure(width, height); item.locate(0, 0, width, height); } }; this.__fn_resize = function () { }; }); flyingon.defineLayout("absolute", function (base) { this.absolute = true; this.arrange = function (target, items, width, height) { var contentWidth = 0, contentHeight = 0, item, offset; for (var i = 0, _ = items.length; i < _; i++) { (item = items[i]).measure(+item.get_width() || item.defaultWidth, +item.get_height() || item.defaultHeight, true, true); offset = item.locate(item.compute_size(item.get_left()) || 0, item.compute_size(item.get_top()) || 0); if (offset.x > contentWidth) { contentWidth = offset.x; } if (offset.y > contentHeight) { contentHeight = offset.y; } } target.contentWidth = contentWidth; target.contentHeight = contentHeight; }; this.__fn_resize = function () { }; this.__fn_collapse = function (target) { return "top"; }; }); flyingon.defineLayout("tab", function (base) {
        this.arrange = function (target, items, width, height) {
            var index = target.get_selectIndex; index = index ? index() : 0; for (var i = 0, _ = items.length; i < _; i++)
            {
                if (i === index) { items[i].measure(width, height, true, true); items[i].locate(0, 0); } else
                { target.__fn_hide(items[i]); }
            } target.contentWidth = width; target.contentHeight = height;
        }; this.__fn_resize = function () { };
    }); var layout_row = flyingon.defineClass(function () {
        var floor = Math.floor; this.length = 0; this.total = 0; this.loop = function (loop, back) { var length = this.length, index; if (length <= back) { back = length - 1; } if ((index = this.length - back - 1) < 0) { index = 1; } for (var i = 0; i < loop; i++) { for (var j = 0; j <= back; j++) { this[this.length++] = this[index + j].copy(this); } } }; this.find = function (index) { var length = this.length; while (length > index) { if (this[index].enable) { return index; } index++; } return -1; }; this.create = function (length, start, step) {
            var item = this[this.length - 1], spacing = this.__spacing; step = step > 0 ? step : 0; do
            { for (var i = 0; i <= step; i++) { this[this.length++] = item = this[start + i].copy(this); item.start = item.start + item.size + spacing; } } while (this.length < length)
        }; this.compute = function (target, size, spacing) { var length = this.length, x = size, weight = 0, items = [], item; for (var i = 0; i < length; i++) { switch ((item = this[i]).unit) { case "px": x -= (item.size = item.value); break; case "%": x -= (item.size = size > 0 ? floor(item.value * size / 100) : 0); break; case "*": items.push(item); weight += item.value; break; default: x -= (item.size = target.compute_size(item.value + item.unit)); break; } } this.weight = weight; if (x > 0 && length > 0) { x -= (length - 1) * spacing; } if (x > 0 && (length = items.length) > 0) { for (var i = 0; i < length; i++) { item = items[i]; x -= (item.size = floor(x * item.value / weight)); weight -= item.value; } } x = 0; for (var i = 0, _ = this.length; i < _; i++) { (item = this[i]).start = x; x += item.size + spacing; } return this.total = x - spacing; }; this.serialize = function () { var values = [], item; for (var i = 0, _ = this.length; i < _; i++) { values.push((item = this[i]).value === 100 && item.unit === "*" ? "*" : item.value + item.unit); } return values.join(" "); };
    }); function layout_cell() { this.value = 0; this.unit = "px"; this.start = 0; this.size = 0; this.enable = true; return this.copy = function (parent) { var result = new this.Class(); result.value = this.value; result.unit = this.unit; result.enable = this.enable; return result; }; }; flyingon.defineLayout("grid", function (base) {
        var layouts = {}, layout_cache = true, regex = /(\d+\.\d*|\d+)?(\w+|\*|%)?(!)?\s*(\.{3}(\d+)?(&(\d+))?)?/g; function layout_column(value, unit, enable) { this.value = +value || (unit === "*" ? 100 : 0); this.unit = unit || "px"; this.enable = enable !== false; }; layout_column.call(layout_column.prototype, layout_column); layout_column.prototype.copy = function () { return new layout_column(this.value, this.unit, this.enable); }; function parse(value) {
            var result = new layout_row(), cache = +value; if (cache > 0) { for (var i = 0; i < cache; i++) { result[result.length++] = new layout_column(0, "*"); } } else if (cache = layouts[value]) { result = new layout_row(); for (var i = 0, _ = result.length = cache.length; i < _; i++) { result[i] = cache[i].copy(); } } else
            { while ((cache = regex.exec(value)) && cache[0]) { result[result.length++] = new layout_column(cache[1], cache[2], !cache[3]); if (cache[4]) { result.loop((+cache[5] | 0) || 10, +cache[7] | 0); } } regex.lastIndex = 0; layouts[value] = result; } if (layout_cache) { result.__cache_key = value; } else
            { layout_cache = true; } return result;
        }; function compute(target, width, height) { var value1 = target.get_layoutColumns() || 3, value2 = target.get_layoutRows() || 3, columns = this.columns, rows = this.rows, spacingWidth = target.compute_size(target.get_spacingWidth()), spacingHeight = target.compute_size(target.get_spacingHeight()), keys = [width, height, spacingWidth, spacingHeight].join(" "), fixed; if (!columns || columns.__cache_key !== value1) { columns = this.columns = parse(value1); this.__cache_key = null; } if (!rows || rows.__cache_key !== value2) { rows = this.rows = parse(value2); this.__cache_key = null; } if (this.__cache_key !== keys) { columns.compute(target, width, spacingWidth); rows.compute(target, height, spacingHeight); if (columns.total > width) { height -= this.scroll_height; fixed = true; } if (rows.total > height) { width -= this.scroll_width; fixed = true; } if (fixed) { columns.compute(target, width, spacingWidth); rows.compute(target, height, spacingHeight); } this.__cache_key = keys; } return columns; }; function span_to(span, index, length) { if (span < 0) { return (span += length) < index ? -1 : span; } return (span += index) >= length ? -1 : span; }; function find(items, index, span, excludes) { var length = items.length, count; while (length > index) { if (excludes && excludes[index] || !items[index].enable) { index++; } else { if (span) { if ((count = span_to(span, index, length)) < 0) { return -1; } for (var i = index; i <= count; i++) { if (excludes && excludes[i] || !items[i].enable) { return find(items, i + 1, span, excludes); } } } return index; } } return -1; }; this.arrange = function (target, items, width, height) {
            var list1 = compute.call(this, target, width, height), list2 = this.rows, vertical = this.vertical, index1 = 0, index2 = 0, item, locked, x, y, size1, size2, row_span, column_span, column_index, cache1, cache2; target.contentWidth = list1.total; target.contentHeight = list2.total; if (list1.length <= 0 || list2.length <= 0) { return target.__fn_hide_after(items, 0); } if (vertical) { cache1 = list1; list1 = list2; list2 = cache1; } for (var i = 0, _ = items.length; i < _; i++)
            {
                if ((column_index = (item = items[i]).get_columnIndex()) < 0) { if ((column_index += list1.length) < 0) { column_index = 0; } } else if (--column_index >= list1.length) { column_index = list1.length - 1; } if ((cache1 = item.get_spacingCells()) > 0 && (index1 += cache1) >= list1.length) { cache2 = index1 / list1.length | 0; index1 -= cache2 * list1.length; if ((index2 = list2.find(index2 + cache2)) < 0) { return target.__fn_hide_after(items, i); } } column_span = item.get_columnSpan(); while (true) { index1 = find(list1, index1, column_span, locked && locked[index2]); if (index1 >= 0 && (column_index < 0 || column_index === index1)) { break; } if ((index2 = list2.find(++index2)) < 0) { return target.__fn_hide_after(items, i); } index1 = column_index > 0 ? column_index : 0; } cache1 = list1[index1]; cache2 = list2[index2]; if (vertical) { x = cache2.start; y = cache1.start; size1 = cache2.size; size2 = cache1.size; } else
                { x = cache1.start; y = cache2.start; size1 = cache1.size; size2 = cache2.size; } item.__arrange_row = index2; item.__arrange_column = index1; if (column_span)
                {
                    index1 = span_to(column_span, cache2 = index1, list1.length); cache2 = list1[index1]; cache2 = cache2.start + cache2.size; if (vertical) { size2 = cache2 - y; } else
                    { size1 = cache2 - x; }
                } if (row_span = item.get_rowSpan())
                {
                    if ((cache2 = span_to(row_span, index2, list2.length)) < 0) { return target.__fn_hide_after(items, i); } for (var j = index2; j <= cache2; j++) { for (var j2 = item.__arrange_column; j2 <= index1; j2++) { ((locked || (locked = {}))[j] || (locked[j] = {}))[j2] = true; } } cache2 = list2[cache2]; cache2 = cache2.start + cache2.size; if (vertical) { size1 = cache2 - x; } else
                    { size2 = cache2 - y; }
                } item.measure(size1, size2, true, true); item.locate(x, y, size1, size2); index1++;
            }
        }; this.__fn_splitter = function (splitter, width, height, vertical) { if (splitter.__vertical = splitter.__arrange_column === 0 || splitter.__parent.__children[splitter.__arrange_index - 1] instanceof flyingon.Splitter || splitter.get_vertical()) { arguments[3] = true; } base.__fn_splitter.apply(this, arguments); }; this.__fn_resize = function (target, start, change) { var vertical = start.vertical, list = vertical ? this.rows : this.columns, item = list[start.index]; if (item) { if ((item.value = start.value + (start.scale === 1 ? change : (change * start.scale * 100 | 0) / 100)) < 0) { item.value = 0; } layout_cache = false; target.__parent[vertical ? "set_layoutRows" : "set_layoutColumns"](list.serialize()); } }; this.__fn_resize_start = function (target, vertical, splitter) { var index = (vertical = splitter.__vertical) ? target.__arrange_row : target.__arrange_column, item = (vertical ? this.rows : this.columns)[index], start = target.__fn_unit_scale(item.value + item.unit, item.size); start.vertical = vertical; start.reverse = !vertical && this.mirror !== "none"; start.index = index; if (item.unit !== start.unit) { start.value = item.size; item.unit = start.unit; } return start; };
    }); flyingon.defineLayout("table", function (base) {
        var layouts = {}, regex_parse = /[ *%\[\]=,(){}!&]|\d+(\.\d*)?|\w+|\.{3}/g; var table_cell = flyingon.defineClass(function (base) { var copy = layout_cell.call(this); this.copy = function (parent) { var result = copy.call(this); if (this.table) { result.table = this.table.copy(this); } return result; }; }); var table_row = flyingon.defineClass(layout_row, function (base) {
            var copy = layout_cell.call(this); this.arrange = function (table, row, items, index, x, y, vertical) {
                var length = items.length, cell, item; for (var i = 0, _ = this.length; i < _; i++)
                {
                    if ((cell = this[i]).enable)
                    {
                        if (cell.table) { index = cell.table.arrange(items, index, cell.start, this.start, vertical); } else
                        {
                            item = items[index++]; item.__arrange_table = table; item.__arrange_row = row; item.__arrange_column = i; if (vertical) { item.measure(this.size, cell.size, true, true); item.locate(y + this.start, x + cell.start, this.size, cell.size); } else
                            { item.measure(cell.size, this.size, true, true); item.locate(x + cell.start, y + this.start, cell.size, this.size); }
                        } if (index >= length) { return index; }
                    }
                } return index;
            }; this.copy = function (parent) { var result = copy.call(this); for (var i = 0, _ = result.length = this.length; i < _; i++) { result[i] = this[i].copy(this); } return result; }; this.serialize = function (values) { values.push((this.value === 100 && this.unit === "*" ? "*" : this.value + this.unit) + "["); for (var i = 0, _ = this.length; i < _; i++) { var column = this[i]; values.push(column.value === 100 && column.unit === "*" ? "*" : column.value + column.unit); if (column.table) { column.table.serialize(values); } } values.push("]") };
        }); var layout_table = flyingon.defineClass(layout_row, function (base) {
            function spacing(target, size, value) { if (value === "100%") { return size; } if (value) { if (+value >= 0) { return +value | 0; } if (value.charAt(value.length - 1) === "%") { return parseFloat(value) * size / 100 | 0; } return target.compute_size(value); } return 0; }; this.copy = function (parent) { var result = new this.Class(); for (var i = 0, _ = result.length = this.length; i < _; i++) { result[i] = this[i].copy(this); } return result; }; this.parse = function (tokens, index) {
                var type = table_row, parent = this, flag = false, length = tokens.length, item, token, name, cache; this.__cache_key2 = null; while (index < length)
                {
                    switch (token = tokens[index++])
                    {
                        case "*": if (flag || !item) { item = parent[parent.length++] = new type(); } item.unit = token; item.value = item.value || 100; flag = true; break; case " ": flag = true; break; case "[": parent = item; type = table_cell; flag = true; break; case "]": item = parent; parent = this; type = table_row; flag = true; break; case "px": if (!flag) { if (item) { item.unit = token; item.value = item.value | 0; } flag = true; } break; case "%": case "in": case "cm": case "mm": case "em": case "ex": case "pt": case "pc": if (!flag) { if (item) { item.unit = token; } flag = true; } break; case "!": if (item) { item.enable = false; flag = true; } break; case "{": cache = new cascade_table(); index = cache.parse(tokens, index); if (item) { item.table = cache; } break; case "}": flag = true; return index; case "(": name = null; cache = ""; while (index < length && (token = tokens[index++]) !== ")") { switch (token) { case " ": break; case "=": name = cache; cache = ""; break; case ",": if (name && cache) { this[name] = cache; cache = ""; } break; default: cache += token; break; } } if (name && cache) { this[name] = cache; } break; case ")": flag = true; break; case "...": if ((token = tokens[index++]) === " ") { token = tokens[index++]; } if (token !== "&") { if (!((cache = +token) > 0)) { cache = 10; } if ((token = tokens[index]) === " ") { token = tokens[index++]; } } else
                        { cache = 10; } if (token === "&") { index++; if ((token = tokens[index++]) === " ") { token = tokens[index++]; } if (parent) { parent.loop(cache, +token | 0); } } else if (parent) { parent.loop(cache, 0); } break; case "&": case "=": flag = true; break; default: if ((token = +token) >= 0) { if (flag || !item) { item = parent[parent.length++] = new type(); flag = false; } item.value = token; } break;
                    }
                } return index;
            }; this.compute1 = function (target, width, height, spacingWidth, spacingHeight) { var value = 0, table, row; base.compute.call(this, target, height, spacingHeight); for (var i = 0, _ = this.length; i < _; i++) { (row = this[i]).compute(target, width, spacingWidth); for (var j = 0, __ = row.length; j < __; j++) { if (table = row[j].table) { table.compute1(target, row[j].size, row.size, spacing(target, spacingWidth, table.spacingWidth), spacing(target, spacingHeight, table.spacingHeight)); } } if (row.total > value) { value = row.total; } } this.width = value; this.height = this.total; }; this.compute2 = function (target, width, height, spacingWidth, spacingHeight) { var value = 0, table, row; base.compute.call(this, target, width, spacingWidth); for (var i = 0, _ = this.length; i < _; i++) { (row = this[i]).compute(target, height, spacingHeight); for (var j = 0, __ = row.length; j < __; j++) { if (table = row[j].table) { table.compute2(target, row.size, row[j].size, spacing(target, spacingWidth, table.spacingWidth), spacing(target, spacingHeight, table.spacingHeight)); } } if (row.total > value) { value = row.total; } } this.width = this.total; this.height = value; }; this.arrange = function (items, index, x, y, vertical) { var length = items.length, row; for (var i = 0, _ = this.length; i < _; i++) { if ((row = this[i]).enable && (index = row.arrange(this, i, items, index, x, y, vertical)) >= length) { return index; } } return index; }; this.serialize = function (values) { for (var i = 0, _ = this.length; i < _; i++) { this[i].serialize(values || (values = [])); } return values ? values.join(" ") : null; };
        }); var cascade_table = flyingon.defineClass(layout_table, function (base) { this.spacingWidth = "100%"; this.spacingHeight = "100%"; this.copy = function (parent) { var result = base.copy.call(this, parent); result.spacingWidth = this.spacingWidth; result.spacingHeight = this.spacingHeight; return result; }; this.serialize = function (values) { values.push("{ "); if (this.spacingWidth !== "100%" || this.spacingHeight !== "100%") { values.push("(spacingWidth=" + this.spacingWidth + ",spacingHeight=" + this.spacingHeight + ") ") } for (var i = 0, _ = this.length; i < _; i++) { this[i].serialize(values = values || []); } values.push(" }"); }; }); var layout_cache = true; function compute(target, table, width, height, spacingWidth, spacingHeight, vertical) {
            var keys = [].slice.call(arguments, 2).join(" "), fn, fixed; if (table.__cache_key2 !== keys)
            {
                fn = vertical ? table.compute2 : table.compute1; fn.call(table, target, width, height, spacingWidth, spacingHeight); if (table.width > width) { height -= this.scroll_height; fixed = true; } if (table.height > height) { width -= this.scroll_width; fixed = true; } if (fixed) { fn.call(table, target, width, height, spacingWidth, spacingHeight); } if (layout_cache) { table.__cache_key2 = keys; } else
                { layout_cache = true; }
            }
        }; this.arrange = function (target, items, width, height) {
            var table = target.__x_layoutTable, spacingWidth = target.compute_size(target.get_spacingWidth()), spacingHeight = target.compute_size(target.get_spacingHeight()), value, cache; if ((cache = target.get_layoutTables()) && (cache = layouts[cache] || (layouts[cache] = eval("[" + cache + "]")))) { for (var i = 0, _ = cache.length; i < _; i++) { if (cache[i][0] >= width && cache[i][1] >= height) { value = cache[i][2] || "*[* * *] ...2"; break; } } } if (!value) { value = target.get_layoutTable() || "*[* * *] ...2"; } if (!table || table.__cache_key1 !== value)
            {
                if (table = layouts[value]) { table = table.copy(); } else
                { table = layouts[value] = this.table = new layout_table(); table.parse(value.replace(/\s+/g, " ").match(regex_parse), 0); } (target.__x_layoutTable = table).__cache_key1 = value;
            } compute.call(this, target, table, width, height, spacingWidth, spacingHeight, this.vertical); target.contentWidth = table.width; target.contentHeight = table.height; if ((cache = table.arrange(items, 0, 0, 0, this.vertical)) < items.length) { target.__fn_hide_after(items, cache); }
        }; this.__fn_splitter = function (splitter, width, height, vertical) { if (splitter.__vertical = splitter.__arrange_column === 0 || splitter.__parent.__children[splitter.__arrange_index - 1] instanceof flyingon.Splitter || splitter.get_vertical()) { arguments[3] = true; } base.__fn_splitter.apply(this, arguments); }; this.__fn_resize = function (target, start, change) { start.item.value = (change += start.value) > 0 ? change : 1; layout_cache = false; target.__parent.set_layoutTable(this.table.serialize()); }; this.__fn_resize_start = function (target, vertical, splitter) { var table = splitter.__arrange_table, row = table[target.__arrange_row], item = vertical ? row : row[splitter.__arrange_column], start = target.__fn_unit_scale(item.value + item.unit, item.size); start.reverse = !vertical && this.mirror !== "none"; start.item = item; return start; };
    });
})(flyingon); (function (flyingon) {
    var regex_name = /[-_](\w)/g, properties = {
        "layout-type": 0, "layout-vertical": 1, "layout-mirror": 1, "layout-spacing-width": 1, "layout-spacing-height": 1, "layout-flow-width": 1, "layout-flow-height": 1, "layout-column3": 0, "layout-rows": 0, "layout-columns": 0, "layout-table": 0, "layout-tables": 0, "layout-align-x": 1, "layout-align-y": 1, "layout-newline": 1, "layout-dock": 1, "layout-row-span": 1, "layout-column-span": 1, "layout-column-index": 1, "layout-spacing-cells": 1, "layout-offset-x": 1, "layout-offset-y": 1
    }, tab_properties = {
        "tab-icon": 1, "tab-text": 1, "tab-show-close": 1, "tab-show-collapse": 1, "tab-collapse": 1
    }, styles = {
        left: 1, top: 1, width: 1, height: 1, minWidth: 1, maxWidth: 1, minHeight: 1, maxHeight: 1, marginLeft: 1, marginTop: 1, marginRight: 1, marginBottom: 1, borderLeftWidth: 0, borderTopWidth: 0, borderRightWidth: 0, borderBottomWidth: 0, paddingLeft: 1, paddingTop: 1, paddingRight: 1, paddingBottom: 1, overflowX: 1, overflowY: 1
    }; for (var name in properties) { properties[name] = (properties[name] ? name.substring(7) : name).replace(regex_name, function (_, x) { return x.toUpperCase(); }); } for (var name in tab_properties) { tab_properties[name] = name.substring(4).replace(regex_name, function (_, x) { return x.toUpperCase(); }); } function dom_wrapper(dom) { var control, children, name, cache1, cache2; switch (dom.getAttribute("layout-control")) { case "Splitter": control = new flyingon.Splitter(dom); break; case "TabPanel": control = new flyingon.TabPanel(); children = true; for (var i = 0, _ = (cache1 = dom.attributes).length; i < _; i++) { if ((name = (cache2 = cache1[i]).name) in tab_properties) { control["set_" + tab_properties[name]](cache2.value); } } break; case "TabControl": control = new flyingon.TabControl(); children = true; break; default: if (dom.getAttribute("layout-type")) { control = new flyingon.Panel(); children = true; } else { control = new flyingon.HtmlControl(dom); } break; } dom_to(dom, control); if (children) { children = dom.children; cache1 = document.createDocumentFragment(); for (var i = 0, _ = children.length; i < _; i++) { control.appendChild(cache2 = dom_wrapper(children[0])); cache1.appendChild(cache2.dom); } control.dom_children.appendChild(cache1); control.__dom_dirty = false; control.__fn_from_dom(dom); } return control; }; function dom_to(dom, control) { var name, value, cache1, cache2; for (var i = 0, _ = (cache1 = dom.attributes).length; i < _; i++) { if ((name = (cache2 = cache1[i]).name) in properties) { control["set_" + properties[name]](cache2.value); } } cache1 = dom.style; for (var name in styles) { if ((value = cache1[name]) !== "") { (control.__styles || (control.__styles = {}))[name] = value; if (styles[name]) { cache1[name] = "";; } } } }; flyingon.layout = function (dom) { if (dom) { var result = new flyingon.Window(), items = dom.children, length = items.length, item, name; dom.style.visibility = "hidden"; dom_to(dom, result); for (var i = 0; i < length; i++) { result.appendChild(dom_wrapper(items[i])); } for (var i = 0, _ = (items = dom.attributes).length; i < _; i++) { if ((name = (item = items[i]).name) in properties) { result["set_" + properties[name]](item.value); } } dom.appendChild(result.dom_window); flyingon.ready(function () { result.render(); }); return result; } }; function dom_layout(dom) { if (dom.getAttribute("layout-type")) { flyingon.layout(dom); } else if (dom.children.length > 0) { for (var i = 0, _ = dom.children.length; i < _; i++) { dom_layout(dom.children[i]); } } }; flyingon.ready(function () { if (flyingon.dom_layout !== false) { dom_layout(document.body); flyingon.dom_layout = false; } });
})(flyingon); flyingon.IChildren = function (base) {
    Class.create || (Class.create = function () { this.dom_children = this.dom.children[0]; this.__children = new flyingon.ControlCollection(this); }); this.__arrange_dirty = true; this.__dom_dirty = true; this.create_dom_template("div", null, "<div style='position:relative;margin:0;border:0;padding:0;left:0;top:0;overflow:hidden;'></div>"); flyingon.defineProperty(this, "children", function () { return this.__children || (this.__children = new flyingon.ControlCollection()); }); this.appendChild = function (item) { var children = this.__children || this.get_children(); children.append.apply(children, arguments); return this; }; this.insertChild = function (index, item) { var children = this.__children || this.get_children(); children.insert.apply(children, arguments); return this; }; this.removeChild = function (item) { var children = this.__children; if (children) { children.remove.apply(children, arguments); } return this; }; this.removeAt = function (index, length) { var children = this.__children; if (children) { children.removeAt.apply(children, index, length); } return this; }; this.render = function () { switch (this.__update_dirty) { case 1: flyingon.__fn_compute_css(this); render_children.call(this); break; case 2: render_children.call(this); break; } }; function render_children() { var items = this.__children; if (items && items.length > 0) { var width = this.clientWidth, height = this.clientHeight, cache; if (this.__arrange_dirty || this.__arrange_width !== width || this.__arrange_height !== height) { if (width > 0 && height > 0) { if (this.__dom_dirty) { cache = document.createDocumentFragment(); for (var i = 0, _ = items.length; i < _; i++) { cache.appendChild(items[i].dom); } this.dom_children.appendChild(cache); this.__dom_dirty = false; } if ((cache = this.get_fontSize()) !== this.__compute_style.fontSize) { this.__compute_style.fontSize = cache; } this.arrange(width, height); this.__arrange_dirty = false; } this.__arrange_width = width; this.__arrange_height = height; } this.render_children(); } this.__update_dirty = 0; }; this.render_children = function () { var items = this.__children, length; if (items && (length = items.length) > 0) { for (var i = 0; i < length; i++) { items[i].render(); } } }; this.__layout = flyingon.layouts["column3"]; this.__fn_measure_auto = function (box) {
        var dom = this.dom_children.parentNode, style = this.__compute_style, value = style.fontSize; this.__fn_measure_client(box); this.render(); if (style.fontSize !== value) { style.fontSize = value; } return {
            width: box.auto_width ? this.contentWidth - this.clientWidth : 0, height: box.auto_height ? this.contentHeight - this.clientHeight : 0
        };
    }; this.arrange = function (width, height) { this.__layout.__fn_arrange(this, width, height); }; var hide_dom = document.createDocumentFragment(); this.__fn_hide = function (item) { if (item.dom.parentNode !== hide_dom) { hide_dom.appendChild(item.dom); item.__visible = false; this.__dom_dirty = true; } }; this.__fn_hide_after = function (items, index) { var item; for (var i = index, _ = items.length; i < _; i++) { if ((item = items[i]).dom !== hide_dom) { hide_dom.appendChild(item.dom); item.__visible = false; this.__dom_dirty = true; } } }; this.copy = function () { var result = base.copy.call(this), items = this.__children, length; if (items && (length = items.length) > 0) { var children = result.__children; for (var i = 0; i < length; i++) { children.append(items[i].copy()); } } return result; }; this.serialize = function (writer) { base.serialize.call(this, writer); if (this.__children.length > 0) { writer.write_array("children", this.__children); } }; this.deserialize_property = function (reader, name, value) {
        if (value && name === "children") { for (var i = 0, _ = value.length; i < _; i++) { this.__children.append(reader.read_object(value[i])); } } else
        { base.deserialize_property.call(this, reader, name, value); }
    }; this.dispose = function () { var children = this.__children; for (var i = 0, _ = children.length; i < _; i++) { children[i].dispose(); } base.dispose.call(this); };
}; flyingon.defineClass("Panel", flyingon.Control, function (base) {
    var layouts = flyingon.layouts, layout_unkown = layouts["flow"]; Class.create_mode = "merge"; Class.create = function (dom) { this.dom_children = this.dom.children[0]; this.__children = new flyingon.ControlCollection(this); }; this.defaultWidth = this.defaultHeight = 400; flyingon.extend(this, flyingon.IChildren, base); this.__render_visible = true; this.__fn_on_scroll = function (event) { var style = this.dom_children.parentNode.style; style.dispaly = "none"; this.__render_items = null; this.render_children(); style.dispaly = ""; }; this.render_children = function () { var items = this.__render_items || (this.__render_visible ? render_items(this) : this.__children), length; if (items && (length = items.length) > 0) { for (var i = 0; i < length; i++) { items[i].render(); } } }; function render_items(target) { var items = target.__render_items = [], children = target.__children, x1 = target.__scrollLeft, y1 = target.__scrollTop, x2 = target.__scrollLeft_last, y2 = target.__scrollTop_last, width = target.offsetWidth, height = target.offsetHeight, right = x1 + width, bottom = y1 + height, visible; if (x1 > x2) { right += width; } else if (x1 < x2) { right = x1; x1 -= (width << 1); } if (y1 > y2) { bottom += height; } else if (y1 < y2) { bottom = y1; y1 -= (height << 1); } for (var i = 0, _ = children.length; i < _; i++) { var item = children[i], style = item.dom.style, x = item.offsetLeft, y = item.offsetTop; if (visible = item.__visible && x <= right && y <= bottom && x + item.offsetWidth >= x1 && y + item.offsetHeight >= y1) { items.push(item); } } return items; }; this.layout = null; this.arrange = function (width, height) { (this.__layout = this.layout || layouts[this.get_layoutType()] || layout_unkown).__fn_arrange(this, width, height); this.__render_items = null; }; this.findAt = function (x, y) { var items = this.__render_items || this.__children, x1 = x + this.__scrollLeft - this.clientLeft, y1 = y + this.__scrollTop - this.clientTop, x2, y2, item; for (var i = 0, _ = items.length; i < _; i++) { if ((item = items[i]) && item.__visible && x1 >= (x2 = item.offsetLeft) && y1 >= (y2 = item.offsetTop) && x1 <= x2 + item.offsetWidth && y1 <= y2 + item.offsetHeight) { return item.findAt ? item.findAt(x - this.clientLeft + x2, y - this.clientTop + y2) : item; } } return this; }; (function () {
        var target = new flyingon.Control(), source, properties = ["newline", "column3", "dock", "columnIndex", "spacingCells"], insert_index = -1, last_index = -1; target.set_border("1px dotted red"); this.__event_bubble_dragover = function (event) { var items = this.__children, dom_body = this.dom_children.parentNode, offset = flyingon.dom_offset(this.dom, event.clientX, event.clientY), index = items.length > 0 ? this.__layout.__fn_index(this, offset.x - event.offsetLeft + dom_body.scrollLeft, offset.y - event.offsetTop + dom_body.scrollTop) : 0, cache = event.dragTarget; if (index >= 0 && insert_index !== index && cache) { target.set_marginLeft(cache.get_marginLeft()); target.set_marginTop(cache.get_marginTop()); target.set_marginRight(cache.get_marginRight()); target.set_marginBottom(cache.get_marginBottom()); target.set_width(cache.offsetWidth + "px"); target.set_height(cache.offsetHeight + "px"); if (source = items[insert_index = index]) { copy_property(source, target); } this.__children.insert(index, target); this.render(); } event.stopPropagation(false); }; this.__event_bubble_drop = function (event) {
            var items = event.dragTargets, length, offset; if (insert_index >= 0) { target.remove(); } else
            { insert_index = this.__children.length; } if (items && (length = items.length) > 0)
            {
                for (var i = 0; i < length; i++)
                {
                    var item = items[i]; if (source) { copy_property(source, item); } else
                    { if (!offset) { offset = flyingon.dom_offset(this.dom, event.clientX, event.clientY); offset.x -= event.offsetLeft + this.clientLeft; offset.y -= event.offsetTop + this.clientTop; } item.set_left(offset.x); item.set_top(offset.y); } this.__children.insert(insert_index++, item);
                }
            } source = null; insert_index = -1; event.stopPropagation(false);
        }; this.__event_bubble_dragleave = function (event) { if (insert_index >= 0) { source = null; insert_index = -1; target.remove(); event.stopPropagation(false); } }; function copy_property(source, target) { for (var i = 0, _ = properties.length; i < _; i++) { var name = properties[i]; target["set_" + name](source["get_" + name]()); } };
    }).call(this);
}); flyingon.defineClass("Splitter", flyingon.Control, function (base) {
    Class.create_mode = "replace"; Class.create = function (dom) {
        this.__fields = Object.create(this.__defaults); if (dom) { this.__fn_from_dom(dom); } else
        { (this.dom = this.dom_template.cloneNode(false)).flyingon = this; }
    }; this.defaultWidth = this.defaultHeight = 4; flyingon.defineProperty(this, "resizable", function () { return "none"; }); this.measure = function () { var target = this.__parent; if (target && (target = target.__layout)) { target.__fn_splitter(this, "fill", "fill", target.vertical); } return base.measure.apply(this, arguments); }; this.__event_bubble_mousedown = function (event) { if (!event.ctrlKey) { event.stopImmediatePropagation(false); } }; this.__event_bubble_mousemove = function (event) { var target, layout, start, index, value; if (!event.ctrlKey && (start = event.pressdown) && (index = this.__arrange_index - 1) >= 0 && (target = this.__parent) && (layout = target.__layout) && (target = target.__children[index])) { start = start.start || (start.start = layout.__fn_resize_start(target, layout.vertical, this)); value = start.vertical ? event.distanceY : event.distanceX; layout.__fn_resize(target, start, start.reverse ? -value : value); event.stopPropagation(false); } };
}); (function (flyingon) {
    function arrange_data(target, items) { var data = target.__tab_data, cache = target.get_selectedIndex(); this.vertical = (this.tab = data.tab) === "left" || this.tab === "right"; if (cache < 0) { cache = 0; } else if (cache >= items.length) { cache = items.length - 1; } this.selectedIndex = cache; if (!target.__selected_last) { cache = items[cache]; cache.addClass("flyingon-TabPanel-selected"); cache.__header.addClass("flyingon-TabPanelHeader-selected"); target.__selected_last = cache; } return data; }; var outlook_base = function (base) {
        function arrange1(target, items, width, height, data) {
            var spacingHeight = target.compute_size(target.get_spacingHeight()), index = this.selectedIndex, y = 0, bottom = height, item; data.only_tab = true; for (var i = 0; i < index; i++)
            {
                if ((item = items[i]).__visible = bottom > y) { item.measure(width, 25, false, true, false, false, true, false); y = item.locate(0, y).y + spacingHeight; item.__arrange_dirty = false; } else
                { target.__fn_hide_after(i); return; }
            } for (var i = items.length - 1; i > index; i--)
            {
                if ((item = items[i]).__visible = bottom > y) { item.measure(width, 25, false, true, false, false, true, false); item.locate(0, bottom -= item.offsetHeight); item.__arrange_dirty = false; bottom -= spacingHeight; } else
                { target.__fn_hide_after(i); return; }
            } if ((item = items[index]).__visible = bottom > y) { data.only_tab = false; item.measure(width, bottom - y, false, false, false, false, true, true); item.locate(0, y); item.__arrange_dirty = true; } else
            { target.__fn_hide(item); }
        }; function arrange2(target, items, width, height, data) {
            var spacingWidth = target.compute_size(target.get_spacingWidth()), index = this.selectedIndex, x = 0, right = width, item; data.only_tab = true; for (var i = 0; i < index; i++)
            {
                if ((item = items[i]).__visible = right > x) { item.measure(25, height, true, false, false, false, false, true); x = item.locate(x, 0).x + spacingWidth; item.__arrange_dirty = false; } else
                { target.__fn_hide_after(i); return; }
            } for (var i = items.length - 1; i > index; i--)
            {
                if ((item = items[i]).__visible = right > x) { item.measure(25, height, true, false, false, false, false, true); item.locate(right -= item.offsetWidth, 0); item.__arrange_dirty = false; right -= spacingWidth; } else
                { target.__fn_hide_after(i); return; }
            } if ((item = items[i]).__visible = right > x) { data.only_tab = false; item.measure(right - x, height, false, false, false, false, true, true); item.locate(x, 0); item.__arrange_dirty = true; } else
            { target.__fn_hide(item); }
        }; this.arrange = function (target, items, width, height) { var data = arrange_data.call(this, target, items); (this.vertical ? arrange2 : arrange1).call(this, target, items, width, height, data); };
    }; var header_base = function (base, class_prefix) {
        var layouts = flyingon.layouts, layout_unkown = layouts["column3"]; Class.create_mode = "merge"; Class.create = function () { this.dom_children = this.dom.children[0]; this.__children = new flyingon.ControlCollection(this); (this.__text = new flyingon.VerticalText()).set_column3("center").addClass("flyingon-TabPanelHeader-text"); this.appendChild(this.__text); }; flyingon.IChildren.call(this, base); this.defaultValue("layoutType", "column3"); this.__fn_show_icon = function (visible, name, icon, column3, index) { var key = "__" + name, target = this[key]; if (visible) { (target || (this[key] = this.__fn_create_icon(name, column3, index))).set_icon(icon); } else if (this[key]) { this[key].set_visibility("collapse"); } }; this.__fn_create_icon = function (name, column3, index) {
            var target = new flyingon.Icon().set_column3(column3); target.name = name; target.addClass(class_prefix + name); if (index >= 0 || (index != null && this[index] && (index = this.__children.indexOf(this[index])) >= 0)) { this.insertChild(index, target); } else
            { this.appendChild(target); } return target;
        }; this.arrange = function (width, height) { (this.__layout = layouts[this.get_layoutType()] || layout_unkown).__fn_arrange(this, width, height); };
    }; var tab_base = function (base, group) { this.defineProperty("tab", "top", "layout"); this.defineProperty("tabStyle", "normal", "last-value"); this.defineProperty("tabWidth", "", "last-value"); this.defineProperty("tabHeight", "", "last-value"); this.defineProperty("tabOffset", 0, "last-value"); if (group) { this.defaultValue("spacingWidth", "1px"); this.defaultValue("spacingHeight", "1px"); this.__render_visible = false; this.defineProperty("selectedIndex", 0, { attributes: "arrange", minValue: "-1", set_code: "this.__fn_selectedIndex(value);" }); this.__fn_selectedIndex = function (value) { var target = this.__selected_last; if (target) { target.removeClass("flyingon-TabPanel-selected"); target.__header.removeClass("flyingon-TabPanelHeader-selected"); } if (target = this.__selected_last = this.__children[value]) { target.addClass("flyingon-TabPanel-selected"); target.__header.addClass("flyingon-TabPanelHeader-selected"); } }; } this.__fn_tab_data = function (collapse, collapse_style) { var data = this.__tab_data || (this.__tab_data = {}); data.collapse = collapse !== undefined ? collapse : this.get_collapse(); data.style = data.collapse ? (collapse_style || "collapse") : this.get_tabStyle(); data.tab = this.get_tab(); data.width = this.get_tabWidth(); data.height = this.get_tabHeight(); data.offset = this.get_tabOffset(); data.only_tab = false; data.x = data.y = data.size = 0; return data; }; }; var tab_control = function (base, class_prefix) {
        this.create_dom_template("div", "overflow:hidden;", "<div class='" + class_prefix + "body' style='position:absolute;overflow:hidden;'><div style='position:absolute;width:100%;height:100%;'><div style='position:relative;margin:0;border:0;padding:0;left:0;top:0;overflow:hidden;'></div></div></div>"); this.defineProperty("collapse", false, "layout"); this.defineProperty("showClose", false, { attributes: "layout", set_code: "(this.__header || this.__fn_create_header()).__fn_show_icon(value, 'close', 'close', 'after')" }); this.defineProperty("showCollapse", false, { attributes: "layout", set_code: "(this.__header || this.__fn_create_header()).__fn_show_icon(value, 'collapse', 'collapse', 'after', '__close')" }); this.defineProperty("icon", "", { attributes: "layout", set_code: "(this.__header || this.__fn_create_header()).__fn_show_icon(value, 'icon', value, 'before', 0)" }); this.defineProperty("text", "", { attributes: "layout", set_code: "(this.__header || this.__fn_create_header()).__text.set_text(value);" }); this.defineProperty("html", "", { attributes: "layout", set_code: "(this.__header || this.__fn_create_header()).__text.set_html(value);" }); this.header_get = function (name) { return this.__header && this.__header.get(name); }; this.header_set = function (name, value) { if (this.__header) { this.__header.set(name, value); } return this; }; this.header_sets = function (values) { if (this.__header) { this.__header.sets(values); } return this; }; this.body_style = function (name, value) { var style = this.dom_body.style; if (value !== undefined) { style[name] = value; } else if (value = name) { for (var name in value) { style[name] = value[name]; } } return this; }; this.__fn_render_header = function (box, header, data) {
            if (data.collapse || data.only_tab)
            {
                var width = header.offsetWidth + box.border_width - this.offsetWidth, height = header.offsetHeight + box.border_height - this.offsetHeight, change; if (data.only_tab) { change = { width: width, height: height }; } else if (data.direction === "left" || data.direction === "right") { change = { width: width }; } else
                { change = { height: height }; } if (data.collapse && header.__collapse) { header.__collapse.set_icon("expand"); } header.render(); return change;
            } if (header.__collapse) { header.__collapse.set_icon(data.direction === "top" || data.direction === "bottom" ? "collapse" : "collapse"); } header.render();
        };
    }; flyingon.defineClass("TabPanelHeader", flyingon.Control, function (base) { header_base.call(this, base, "flyingon-TabPanelHeader-"); this.__event_bubble_click = function (event) { var target = this.__parent, parent = target.__parent; switch (event.target.name) { case "collapse": (target = parent.set_collapse ? parent : target).set_collapse(!target.get_collapse()); break; case "close": target.remove(); break; default: if (parent.set_selectedIndex) { parent.set_selectedIndex(target.childIndex()); } break; } }; }); flyingon.defineClass("TabPanel", flyingon.Panel, function (base) {
        Class.create_mode = "merge"; Class.create = function () { (this.__header = new flyingon.TabPanelHeader()).__parent = this; this.dom.appendChild(this.__header.dom); this.dom_children = (this.dom_body = this.dom.children[0]).children[0].children[0]; }; tab_base.call(this, base, false); tab_control.call(this, base, "flyingon-TabPanel-"); this.defineProperty("weightWidth", 100, { attributes: "layout", minValue: "1" }); this.defineProperty("weightHeight", 100, "last-value"); this.measure = function () {
            var class_prefix = "flyingon-TabPanel-", direction1 = this.__direction_last, direction2, style1 = this.__style_last, style2, cache = this.__parent, data; if (data = cache.__tab_data) { cache = cache.__parent; this.__tab_data = data; } else
            { data = this.__fn_tab_data(); } direction2 = data.direction = data.collapse && cache && (cache = cache.__layout) && cache.__fn_collapse(this) || data.tab; style2 = data.style; if (direction2 !== direction1) { if (direction1) { this.removeClass(class_prefix + direction1); } this.addClass(class_prefix + (this.__direction_last = direction2)); } if (style2 !== style1) { if (style1) { this.removeClass(class_prefix + style1); } this.addClass(class_prefix + (this.__style_last = style2)); } if (direction2 !== direction1 || style2 !== style1) { if (direction1 && style1) { this.removeClass(class_prefix + style1 + "-" + direction1); } if (direction2 && style2) { this.addClass(class_prefix + style2 + "-" + direction2); } } return base.measure.apply(this, arguments);
        }; this.before_measure = function (box) {
            var header = this.__header, width = this.offsetWidth - box.border_width, height = this.offsetHeight - box.border_height, data = this.__tab_data; header.__update_dirty = 1; header.__arrange_dirty = true; header.set_width(data.width); header.set_height(data.height); if (data.size > 0)
            {
                if (data.direction === "top" || data.direction === "bottom") { header.measure(data.size, height, false, true, false, false, true, false); } else
                { header.measure(width, data.size, true, false, false, false, false, true); }
            } else
            { header.measure(width, height, true, true); } switch (data.direction) { case "left": header.locate(0, data.y || 0); break; case "top": header.locate(data.x || 0, 0); break; case "right": header.locate(data.collapse || data.only_tab ? 0 : width - header.offsetWidth, data.y || 0); break; case "bottom": header.locate(data.x || 0, data.collapse || data.only_tab ? 0 : height - header.offsetHeight); break; } return this.__fn_render_header(box, header, data);
        }; this.__fn_measure_client = function (box) { var dom_body = this.dom_body, style = dom_body.style, data = this.__tab_data; if (!(style.display = data.collapse || data.only_tab ? "none" : "")) { var header = this.__header, width = this.offsetWidth - box.border_width, height = this.offsetHeight - box.border_height, offset = data.offset; if (header.offsetWidth > 0 && header.offsetHeight > 0) { offset -= 1; } switch (data.tab) { case "top": style.left = "0"; style.top = header.offsetHeight + offset + "px"; style.width = width + "px"; style.height = height - header.offsetHeight - offset + "px"; break; case "left": style.left = header.offsetWidth + offset + "px"; style.top = "0"; style.width = width - header.offsetWidth - offset + "px"; style.height = height + "px"; break; case "right": style.left = style.top = "0"; style.width = width - header.offsetWidth - offset + "px"; style.height = height + "px"; break; case "bottom": style.left = style.top = "0"; style.width = width + "px"; style.height = height - header.offsetHeight - offset + "px"; break; } if (!this.box_border_sizing) { style.width = (dom_body.clientWidth << 1) - dom_body.offsetWidth + "px"; style.height = (dom_body.clientHeight << 1) - dom_body.offsetHeight + "px"; } } base.__fn_measure_client.call(this, box); };
    }); flyingon.defineClass("TabControlHeader", flyingon.Control, function (base) { header_base.call(this, base, "flyingon-TabControlHeader-"); this.__event_bubble_click = function (event) { var target = this.__parent; switch (event.target.name) { case "collapse": target.set_collapse(!target.get_collapse()); break; case "close": target.remove(); break; } }; }); flyingon.defineClass("TabControl", flyingon.Panel, function (base) {
        Class.create_mode = "replace"; Class.create = function () { this.__fields = Object.create(this.__defaults); this.__children = new flyingon.ControlCollection(this, flyingon.TabPanel); (this.dom = this.dom_template.cloneNode(true)).flyingon = this; this.dom_children = (this.dom_body = this.dom.children[0]).children[0].children[0]; }; tab_base.call(this, base, true); tab_control.call(this, base, "flyingon-TabControl-"); this.defineProperty("header", true, "arrange"); this.defineProperty("tabFill", false, "arrange"); this.defaultValue("tabStyle", "tab1"); this.__fn_create_header = function () { var header = this.__header = new flyingon.TabControlHeader(); header.__parent = this; this.dom.appendChild(header.dom); return header; }; this.measure = function () { var data = this.__fn_tab_data(undefined, "shrink"), collapse = this.__collapse_last, target; if (collapse) { this.removeClass("flyingon-TabControl-collapse-" + collapse); } if (this.__collapse_last = data.collapse && (target = this.__parent) && (target = target.__layout) && target.__fn_collapse(this)) { this.addClass("flyingon-TabControl-collapse-" + this.__collapse_last); } return base.measure.apply(this, arguments); }; this.before_measure = function (box) {
            var header = this.__header, style = header.dom.style, width = this.offsetWidth - box.border_width, data = this.__tab_data, cache; if (header && this.get_header() && data.style !== "thumb") { header.__update_dirty = 1; header.__arrange_dirty = true; style.width = style.height = ""; if (data.collapse && (cache = this.__parent) && (cache = cache.__layout) && (cache = cache.__fn_collapse(this))) { data.direction = cache; style.display = "none"; } else if (style.display) { style.display = ""; } header.measure(width, 25, true, true); header.locate(0, 0, width); return this.__fn_render_header(box, header, data); } else
            { style.display = "none"; }
        }; this.__fn_measure_client = function (box) { var header = this.__header, dom = this.dom_body, style = dom.style, y = header && !header.dom.style.display ? header.offsetHeight : 0, width = this.offsetWidth - box.border_width; style.top = y + "px"; style.width = width + "px"; style.height = this.offsetHeight - box.border_height - y + "px"; if (!this.box_border_sizing) { style.width = (dom.clientWidth << 1) - dom.offsetWidth + "px"; style.height = (dom.clientHeight << 1) - dom.offsetHeight + "px"; } base.__fn_measure_client.call(this, box); }; this.arrange = function (width, height) {
            var target = this.__icon_next; if (target && target.dom.parentNode === this.dom_children) { this.dom_children.removeChild(target.dom); } if ((target = this.__icon_previous) && target.dom.parentNode === this.dom_children) { this.dom_children.removeChild(target.dom); } if ((target = this.__tab_data).collapse) { (this.__layout = layout_collapse).__fn_arrange(this, width, height); } else if (this.__layout = layouts[target.style]) { this.__layout.__fn_arrange(this, width, height); } else
            { base.arrange.call(this, width, height); }
        }; var layouts = (function () {
            function show_icon(target, next, icon, width, height) { var name = next ? "next" : "previous", key = "__icon_" + name, item = target[key]; if (!item) { item = target[key] = new flyingon.Icon(); item.addClass("flyingon-TabControl-" + name); item.set_icon(icon); item.__parent = target; item.onclick = next ? move_next : move_previous; } if (item.dom.parentNode !== target.dom_children) { target.dom_children.appendChild(item.dom); } item.measure(width, height, true, true); return item; }; function move_next(event) { var target = this.__parent; }; function move_previous(event) { var target = this.__parent; }; function arrange1(target, items, width, height, data, item, index, only_tab) {
                var spacingWidth = target.compute_size(target.get_spacingWidth()), length = items.length, values = [], x = 0, y = 0, size, value, icon; for (var i = 0; i < length; i++) { (item = items[i]).__visible = true; item.__arrange_dirty = !(data.only_tab = only_tab || i !== index); item.measure(width, height, false, false, false, false, true, true); values.push(x); x += (i !== index ? item.offsetWidth : item.__header.offsetWidth); if (i === index) { size = x; } x += spacingWidth; } value = item.__header.offsetHeight; if (this.tab === "bottom") { y = height - value; } if (x > width) { icon = show_icon(target, false, "collapse", 20, value); icon.locate(0, y); icon.render(); x = icon.offsetWidth + spacingWidth; icon = show_icon(target, true, "expand", 20, value); icon.locate(width -= icon.offsetWidth, y); icon.render(); if (size > width - x) { x = width - size - spacingWidth; if (index < length - 1) { x -= 20; } } } else
                { x = 0; } for (var i = 0; i < length; i++)
                {
                    item = items[i]; value = x + values[i]; if (i !== index || only_tab) { item.locate(value, y); } else
                    { item.locate(0, 0); item.__header.locate(value, y); }
                }
            }; function arrange2(target, items, width, height, data, item, index, only_tab) {
                var spacingHeight = target.compute_size(target.get_spacingHeight()), length = items.length, values = [], x = 0, y = 0, size, value, icon; for (var i = 0; i < length; i++) { (item = items[i]).__visible = true; item.__arrange_dirty = !(data.only_tab = only_tab || i !== index); item.measure(width, height, false, false, false, false, true, true); values.push(y); y += (i !== index ? item.offsetHeight : item.__header.offsetHeight); if (i === index) { size = y; } y += spacingHeight; } value = item.__header.offsetWidth; if (this.tab === "right") { x = width - value; } if (y > width) { icon = show_icon(target, false, "collapse", value, 20); icon.locate(x, 0); icon.render(); y = icon.offsetHeight + spacingHeight; icon = show_icon(target, true, "expand", value, 20); icon.locate(x, height -= icon.offsetHeight); icon.render(); if (size > height - y) { y = height - size - spacingHeight; if (index < length - 1) { y -= 20; } } } else
                { y = 0; } for (var i = 0; i < length; i++)
                {
                    item = items[i]; if (i !== index || only_tab) { item.locate(x, y + values[i]); } else
                    { item.locate(0, 0); item.__header.locate(x, y + values[i]); }
                }
            }; this.tab1 = this.tab2 = this.tab3 = this.tab4 = this.thumb = flyingon.defineLayout(function (base) {
                function all_weight(items, fn) { var item, value = 0; for (var i = 0, _ = items.length; i < _; i++) { value += ((item = items[i]).__weight = item[fn]()); } return value; }; function arrange1_fill(target, items, width, height, data, item, index) {
                    var spacingWidth = target.compute_size(target.get_spacingWidth()), length = items.length, weight = all_weight(items, "get_weightWidth"), x = 0, size = width - spacingWidth * (length - 1); if (size < length) { size += length; spacingWidth -= 1; } for (var i = 0; i < length; i++)
                    {
                        (item = items[i]).__visible = true; data.x = (item.__arrange_dirty = !(data.only_tab = i !== index)) ? x : 0; size -= (data.size = (size * item.__weight / weight) | 0); weight -= item.__weight; item.measure(width, height, false, false, false, false, true, true); if (data.only_tab) { item.locate(x, this.tab === "top" ? 0 : height - item.offsetHeight); } else
                        { item.locate(0, 0); } x += data.size + spacingWidth;
                    }
                }; function arrange2_fill(target, items, width, height, data, item, index) {
                    var spacingHeight = target.compute_size(target.get_spacingHeight()), length = items.length, weight = all_weight(items, "get_weightHeight"), y = 0, size = height - spacingHeight * (length - 1); if (size < length) { size += length; spacingHeight -= 1; } for (var i = 0; i < length; i++)
                    {
                        (item = items[i]).__visible = true; data.y = (item.__arrange_dirty = !(data.only_tab = i !== index)) ? y : 0; size -= (data.size = (size * item.__weight / weight) | 0); weight -= item.__weight; item.measure(width, height, false, false, false, false, true, true); if (data.only_tab) { item.locate(this.tab === "left" ? 0 : width - item.offsetWidth, y); } else
                        { item.locate(0, 0); } y += data.size + spacingHeight;
                    }
                }; this.arrange = function (target, items, width, height) { var data = arrange_data.call(this, target, items), index = this.selectedIndex, item = items[index], dom = item.dom, parent = dom.parentNode; if (parent && parent.children[0] !== dom) { parent.insertBefore(dom, parent.children[0]); } (target.get_tabFill() ? (this.vertical ? arrange2_fill : arrange1_fill) : (this.vertical ? arrange2 : arrange1)).call(this, target, items, width, height, data, item, index); };
            }); layout_collapse = flyingon.defineLayout(function (base) { this.arrange = function (target, items, width, height) { var data = arrange_data.call(this, target, items), index = this.selectedIndex, item = items[index]; ((this.vertical = data.direction === "left" || data.direction === "right") ? arrange2 : arrange1).call(this, target, items, width, height, data, item, index, true); }; }); this.outlook = flyingon.defineLayout(function (base) { outlook_base.call(this, base); }); return this;
        }).call(Object.create(null)), layout_collapse;
    }); flyingon.defineClass("OutlookBar", flyingon.Panel, function (base) { Class.create_mode = "replace"; Class.create = function () { this.__fields = Object.create(this.__defaults); this.__children = new flyingon.ControlCollection(this, flyingon.TabPanel); (this.dom = this.dom_template.cloneNode(true)).flyingon = this; this.dom_children = this.dom.children[0]; }; tab_base.call(this, base, true); this.arrange = function (width, height) { this.__fn_tab_data(false); (this.__layout = layout).__fn_arrange(this, width, height); }; var layout = flyingon.defineLayout(function (base) { outlook_base.call(this, base); this.__fn_collapse = function (target) { return null; }; }); });
})(flyingon); (function (flyingon) {
    var text_base = function (base) {
        Class.create_mode = "merge"; Class.create = function () { this.dom_span = this.dom.children[0]; }; this.create_dom_template("div", null, "<span style='position:relative;margin:0;border:0;padding:0;'></span>"); this.defineProperty("text", "", { set_code: "this.dom_span." + this.__textContent_name + " = value;", change_code: "this.__fn_change_text(value, false);" }); this.defineProperty("html", "", { set_code: "this.dom_span.innerHTML = value;", change_code: "this.__fn_change_text(value, true);" }); this.after_measure = function (box) { var style = this.dom_span.style; switch (this.get_verticalAlign()) { case "top": style.top = "0"; break; case "middle": style.top = ((this.clientHeight - this.dom_span.offsetHeight) >> 1) + "px"; break; default: style.top = this.clientHeight - this.dom_span.offsetHeight + "px"; break; } }; this.__fn_measure_auto = function (box) {
            return {
                width: box.auto_width ? this.dom_span.offsetWidth + box.client_width - this.offsetWidth : 0, height: box.auto_height ? this.dom_span.offsetHeight + box.client_height - this.offsetHeight : 0
            }
        };
    }; flyingon.defineClass("Label", flyingon.Control, function (base) {
        text_base.call(this, base); this.__fn_change_text = function (text, is_html) {
            var box = this.__boxModel; if (box && this.__parent)
            {
                if (box.auto_width || box.auto_height)
                {
                    this.__update_dirty = 1
                    this.__parent.update(true);
                } else
                { this.after_measure(box); }
            }
        };
    }); flyingon.defineClass("VerticalText", flyingon.Control, function (base) {
        text_base.call(this, base); this.__fn_change_text = function (text, is_html) {
            var box = this.__boxModel; this.__vertical_text = false; if (box && this.__parent)
            {
                if (box.auto_width || box.auto_height)
                {
                    this.__update_dirty = 1
                    (this.__parent || this).update(true);
                } else
                { if (text) { this.before_measure(box); } this.after_measure(box); }
            }
        }; this.before_measure = function (box) { if (this.get_vertical() || this.__parent.get_vertical()) { if (!this.__vertical_text) { var text = this.__fields.text; if (text) { this.dom_span.innerHTML = text.split("").join("<br>"); } this.__vertical_text = true; } } else if (this.__vertical_text) { this.dom_span.innerHTML = this.__fields.text; this.__vertical_text = false; } };
    });
})(flyingon); flyingon.defineClass("Button", flyingon.Control, function (base) { this.create_dom_template("input", null, { type: "button" }); this.defaultHeight = 25; this.defineProperty("text", "", { set_code: "this.dom.value = value;" }); }); flyingon.defineClass("Icon", flyingon.Control, function (base) {
    this.defaultWidth = this.defaultHeight = 24; this.create_dom_template("div", "overflow:hidden;text-align:center;vertical-align:middle;background-repeat:no-repeat;user-select:none;-webkit-user-select:none;-moz-user-select:none;"); this.defineProperty("fontFamily", "", { set_code: "this.__fn_fontFamily(value || 'flyingon');" }); this.defineProperty("icon", "", { set_code: "this.__fn_font_icon(value);" }); var font_list = {}, regex0 = /0/g, regex1 = /1/g, css_template = "@font-face {\n" + "font-family: \"0\";\n" + "font-style: normal;\n" + "font-weight: normal;\n" + "src: url(\"1.eot\");\n" + "src: url(\"1.eot?#iefix\") format(\"embedded-opentype\"),\n" + "url(\"1.woff\") format(\"woff\"),\n" + "url(\"1.ttf\") format(\"truetype\"),\n" + "url(\"1.svg#0\") format(\"svg\");\n" + "}"; flyingon.icons = function (name, icons) { if (name && icons) { var list = font_list[name], item; font_list[name] = icons; if (list && list.constructor === Array) { for (var i = 0, _ = list.length; i < _; i++) { (item = list[i]).__fn_font_icon(item.__fields.icon); } } } }; this.__fn_fontFamily = function (name) {
        var cache = font_list[name]; this.dom.style.fontFamily = name; if (cache)
        {
            if (this.__fields.icon)
            {
                if (cache.constructor === Array) { cache.push(this); } else
                { this.__fn_font_icon(this.__fields.icon); }
            }
        } else
        { font_list[name] = [this]; cache = flyingon.icons_path + name; flyingon.script(cache + ".js"); flyingon.style(css_template.replace(regex0, name).replace(regex1, cache)); }
    }; this.__fn_font_icon = (function (name) {
        return function (icon) {
            if (icon)
            {
                var cache; if (icon.indexOf("url" >= 0) && (cache = icon.indexOf(")")) > 0)
                {
                    if (++cache === icon.length) { this.dom.style.backgroundImage = icon; } else
                    { this.dom.style.backgroundImage = icon.substring(0, cache); this.dom.style.backgroundPosition = icon.substring(cache + 1); }
                } else if (cache = this.__fields.fontFamily) { if (cache = font_list[cache]) { this.dom[name] = cache[icon] || ""; } } else
                { this.set_fontFamily("flyingon"); }
            } else
            { this.dom[name] = ""; }
        };
    })(this.__textContent_name); this.render = function () { if (this.__update_dirty === 1) { flyingon.__fn_compute_css(this); this.dom.style.lineHeight = this.clientHeight + "px"; } }; if (flyingon.browser_MSIE) { this.__event_capture_mousedown = function (event) { this.dom.onselectstart = function (event) { return false; }; }; }
}); flyingon.defineClass("Image", flyingon.Control, function (base) { Class.create_mode = "merge"; Class.create = function () { this.dom.load = this.__fn_image_load; }; this.defaultHeight = 100; this.defaultValue("width", "auto"); this.defaultValue("height", "auto"); this.create_dom_template("img"); this.defineProperty("src", "", { set_code: "this.dom.src = value ? value.replace('@theme', flyingon.current_theme).replace('@language', flyingon.current_language) : '';" }); this.defineProperty("alt", "", { set_code: "this.dom.alt = value;" }); this.__fn_image_load = function () { }; }); flyingon.defineClass("HtmlControl", flyingon.Control, function (base) {
    Class.create_mode = "replace"; Class.create = function (dom) {
        this.__fields = Object.create(this.__defaults); if (dom) { this.__fn_from_dom(dom); } else
        { (this.dom = this.dom_template.cloneNode(false)).flyingon = this; }
    }; this.defineProperty("html", "", { set_code: "this.dom.innerHTML = value;" }); this.defineProperty("text", "", { set_code: "this.dom." + this.__textContent_name + " = value;" }); this.appendChild = function (dom) { this.dom.appendChild(dom); return this; }; this.insertBefore = function (dom, target) { this.dom.insertBefore(dom, target); return this; }; this.removeChild = function (dom) { this.dom.removeChild(dom); return this; };
}); (function (flyingon) {
    var binding_event = (function () {
        var host = document.documentElement, body, events = Object.create(null), KeyEvent = flyingon.KeyEvent, MouseEvent = flyingon.MouseEvent, fix_event = flyingon.__fn_fix_event, dragdrop = flyingon.dragdrop, draggable, resizable, hover_control, setCapture, releaseCapture, capture_dom, capture_cache, pressdown, host_mousemove = true, user_select = flyingon.__fn_style_prefix("user-select"), event_false = function () { return false; }; flyingon.ready(function () { body = document.body; }); function dom_target(event) {
            var dom = event.target; while (dom)
            {
                if (dom.flyingon) { return dom.flyingon; } dom = dom.parentNode
            } return host.flyingon;
        }; if (document.createElement("div").setCapture)
        {
            setCapture = function (dom, event) {
                if (user_select) { capture_cache = body.style[user_select]; body.style[user_select] = "none"; } else
                { capture_cache = body.onselectstart; body.onselectstart = event_false; } dom.setCapture();
            }; releaseCapture = function (dom) {
                if (user_select) { body.style[user_select] = capture_cache; } else
                { body.onselectstart = capture_cache; } dom.releaseCapture();
            };
        } else
        { setCapture = function (dom, event) { if (user_select) { capture_cache = body.style[user_select]; body.style[user_select] = "none"; } }; releaseCapture = function (dom) { if (user_select) { body.style[user_select] = capture_cache; } }; flyingon.addEventListener(host, "mousemove", function (event) { if (!host_mousemove) { host_mousemove = true; } else if (pressdown) { events.mousemove.call(this, event || fix_event(window.event)); } else if (hover_control) { hover_control.dispatchEvent(new MouseEvent("mouseout", event, pressdown), true); hover_control.__fn_to_hover(false); } }); }; flyingon.addEventListener(host, "mouseup", function (event) { if (pressdown) { events.mouseup.call(this, event || fix_event(window.event), true); } }); events.mousedown = function (event) {
            if (pressdown) { events.mouseup(event); return; } var ownerWindow = this.flyingon, target = dom_target(event || (event = fix_event(window.event))) || ownerWindow, cache; if (ownerWindow.__mainWindow.__activeWindow !== ownerWindow) { ownerWindow.active(); host.flyingon = ownerWindow; } if (event.which === undefined) { event.which = event.button & 1 ? 1 : (event.button & 2 ? 3 : 2); } pressdown = {
                dom: event.target, capture: target, which: event.which, clientX: event.clientX, clientY: event.clientY
            }; if (target.dispatchEvent(new MouseEvent("mousedown", event)) !== false)
            {
                if (resizable) { setCapture(capture_dom = event.target, event); flyingon.__disable_click = flyingon.__disable_dbclick = true; } else if ((cache = target.get_draggable()) !== "none" && dragdrop.start(target, cache, event)) { setCapture(capture_dom = event.target, event); draggable = cache; } else
                { target.__fn_to_active(true); }
            } else
            { resizable = null; target.__fn_to_active(true); setCapture(capture_dom = event.target, event); }
        }; events.mousemove = function (event) { var target, cache; host_mousemove = false; event || (event = fix_event(window.event)); if (pressdown && (target = pressdown.capture)) { if (resizable) { target.__fn_resize(resizable, event, pressdown); target.get_ownerWindow().__fn_registry_update(target, true); } else if (draggable) { dragdrop.move(event, pressdown); } else { target.dispatchEvent(new MouseEvent("mousemove", event, pressdown)); } } else if (target = dom_target(event)) { resizable = null; if ((cache = target.get_resizable()) === "none" || !(resizable = target.__fn_resize_side(cache, event))) { if (target !== (cache = hover_control)) { if (cache) { cache.dispatchEvent(new MouseEvent("mouseout", event, pressdown), true); cache.__fn_to_hover(false); } hover_control = target; target.dispatchEvent(new MouseEvent("mouseover", event, pressdown)); target.__fn_to_hover(true); } target.dispatchEvent(new MouseEvent("mousemove", event, pressdown)); } (target.__ownerWindow || target.get_ownerWindow()).__fn_set_cursor(target, resizable && resizable.cursor); } }; events.mouseup = function (event, cancel) { var target; if (capture_dom) { releaseCapture(capture_dom); capture_dom = null; } if (resizable) { resizable = null; pressdown = null; return; } event || (event = fix_event(window.event)); if (draggable) { draggable = null; if (dragdrop.stop(event, pressdown, cancel)) { flyingon.__disable_click = flyingon.__disable_dbclick = true; } } if (pressdown && (target = pressdown.capture)) { target.dispatchEvent(new MouseEvent("mouseup", event, pressdown)); target.__fn_to_active(false); } pressdown = null; }; events.click = function (event) { var target; if (flyingon.__disable_click) { flyingon.__disable_click = false; } else if (target = dom_target(event || (event = fix_event(window.event)))) { return target.dispatchEvent(new MouseEvent("click", event)); } }; events.dblclick = function (event) { var target; if (flyingon.__disable_dbclick) { flyingon.__disable_dbclick = false; } else if (target = dom_target(event || (event = fix_event(window.event)))) { return target.dispatchEvent(new MouseEvent("dblclick", event)); } }; events.mousewheel = events.DOMMouseScroll = function (event) { var target = dom_target(event || (event = fix_event(window.event))), value = event.wheelDelta || (-event.detail * 40); event = new MouseEvent("mousewheel", event, pressdown); event.wheelDelta = value; return target.dispatchEvent(event); }; events.keydown = events.keypress = events.keyup = function (event) { if (!(event || (event = fix_event(window.event))).which) { event.which = event.charCode || event.keyCode; } return dom_target(event).dispatchEvent(new KeyEvent(event.type, event)); }; events.contextmenu = function (event) { return dom_target(event || fix_event(window.event)).dispatchEvent("contextmenu"); }; events.load = function (event) { return dom_target(event || fix_event(window.event)).dispatchEvent("contextmenu"); }; events.error = function (event) { return dom_target(event || fix_event(window.event)).dispatchEvent("contextmenu"); }; flyingon.__fn_dom_event = function (target, release) { var dom = target.dom; (target.dom_children && target.dom_children.parentNode || dom).onscroll = release ? null : onscroll; dom.onfocus = release ? null : onfocus; dom.onblur = release ? null : onblur; target.__has_dom_event = true; }; function onscroll(event) { var event = event || fix_event(window.event), dom = event.target, target = dom_target(event), result; target.__scrollLeft = dom.scrollLeft; target.__scrollTop = dom.scrollTop; if (target.__fn_on_scroll) { target.__fn_on_scroll(event); } result = target.dispatchEvent("scroll"); target.__scrollLeft_last = dom.scrollLeft; target.__scrollTop_last = dom.scrollTop; pressdown = null; return result; }; function onfocus(event) { var target = dom_target(event || fix_event(window.event)); return target.dispatchEvent("focus"); }; function onblur(event) { var target = dom_target(event || fix_event(window.event)); return target.dispatchEvent("blur"); }; return function (dom) { for (var name in events) { dom["on" + name] = events[name]; } };
    })(); function delay_update(ownerWindow) {
        var target, timer, callback_fn; function update() { if (callback_fn) { callback_fn(ownerWindow); callback_fn = null; } if (target) { target.render(); target = null; } timer = 0; }; ownerWindow.__fn_registry_update = function (control, update_now, callback) {
            if (timer) { clearTimeout(timer); } if (callback && !callback_fn) { callback_fn = callback; } if (target) { if (control !== target && control.__parent !== target) { target = target.__parent !== control ? ownerWindow : control; } } else
            { target = control; } if (update_now) { update(); timer = 0; } else
            { timer = setTimeout(update, 20); }
        };
    }; flyingon.__all_windows = []; flyingon.IWindow = function (base) { this.__fn_init_window = function (dom) { this.__ownerWindow = dom.flyingon = this; binding_event(dom); delay_update(this); }; flyingon.defineProperty(this, "mainWindow", function () { return this.__mainWindow || null; }); flyingon.defineProperty(this, "activeWindow", function () { return this.__mainWindow && this.__mainWindow.__activeWindow || null; }); flyingon.defineProperty(this, "parentWindow", function () { return this.__parentWindow || null; }); this.defineProperty("opacity", 1, { minValue: 0, maxValue: 1, set_code: "this.dom.style.opacity = value;" }); this.defineEvent("activate"); this.defineEvent("deactivate"); this.active = function () { var first = this.get_mainWindow(), target; if ((target = first.__activeWindow) !== this) { if (target) { if (target !== first) { target.dom.style.zIndex = 0; } target.dispatchEvent("deactivate"); target.__fn_to_active(false); } this.dispatchEvent("activate"); first.__activeWindow = this; if (this !== first) { this.dom.style.zIndex = 1; } this.__fn_to_active(true); } }; var style; this.__fn_set_cursor = function (target, cursor) { if (style) { style.cursor = ""; } if (target) { style = target.dom.style; style.cursor = this.__mainWindow.dom_window.style.cursor = cursor || (target.get_draggable() !== "none" ? "move" : target.get_cursor()); } }; };
})(flyingon); flyingon.defineClass("Window", flyingon.Panel, function (base) { Class.create_mode = "merge"; Class.create = function () { var dom = this.dom_window = document.createElement("div"); flyingon.__initializing = true; document.documentElement.flyingon = this; dom.className = "flyingon"; dom.style.cssText = "position:relative;overflow:hidden;width:100%;height:100%"; this.__fn_init_window(this.dom); dom.appendChild(this.dom); flyingon.dom_layout = false; this.__activeWindow = this.__mainWindow = this; this.__children = new flyingon.ControlCollection(this); this.__states = { active: true }; this.dom.className += " flyingon-Window--active"; flyingon.__all_windows.push(this); flyingon.ready(function () { var _this = this; flyingon.addEventListener(window, "resize", function (event) { _this.__render_items = null; _this.update(true, true); }); }, this); }; flyingon.extend(this, flyingon.IWindow, base); flyingon.defineProperty(this, "mainWindow", function () { return this; }); flyingon.defineProperty(this, "activeWindow", function () { return this.__activeWindow || this; }); flyingon.defineProperty(this, "parentWindow", function () { return null; }); this.show = function (host) { flyingon.ready(function () { if (host) { if (host.constructor === String) { host = document.getElementById(host); } } (host || document.body).appendChild(this.dom_window); this.render(); }, this); }; this.render = (function (render) { return function () { var dom = this.dom_window; if (dom && dom.parentNode) { if (this.__update_dirty === 1) { flyingon.__fn_compute_css(this); this.__update_dirty = 2; } if (this.__arrange_dirty) { var style = dom.style, height; if (style.height !== "100%" || !(height = dom.clientHeight)) { height = parseInt((document.body.currentStyle || window.getComputedStyle(document.body, null)).marginBottom) || 0; if ((height = (window.innerHeight || (flyingon.quirks_mode ? document.body : document.documentElement).clientHeight) - dom.offsetTop - height) <= 0) { height = 600; } style.height = height + "px"; } this.measure(dom.clientWidth, height, true, true); this.locate(0, 0); } render.call(this); } flyingon.__initializing = false; }; })(this.render); }); flyingon.defineClass("Dialog", flyingon.Panel, function (base) {
    Class.create_mode = "merge"; Class.create = function () { flyingon.__initializing = true; this.initialize_header(this.__header = new flyingon.Panel()); (this.dom_header = this.dom.children[0]).appendChild(this.__header.dom); this.dom_children = (this.dom_body = this.dom.children[1]).children[0]; this.__header.addClass("flyingon-Dialog-header").set_layoutType("column3").__parent = this; this.__fn_init_window(this.dom); }; flyingon.extend(this, flyingon.IWindow, base); this.create_dom_template("div", "overflow:hidden;", "<div style='position:absolute;left:0;top:0;width:100%;overflow:hidden;'></div><div style='position:absolute;left:0;width:100%;'><div style='position:relative;margin:0;border:0;padding:0;left:0;top:0;overflow:hidden;'></div></div>"); this.defaultWidth = 600; this.defaultHeight = 400; this.defaultValue("resizable", "both"); this.defineProperty("start", "center"); this.defineProperty("header", true, "layout"); this.defineProperty("icon", "", { wrapper: "this.__header_icon.set_icon(value);" }); this.defineProperty("text", "", { set_code: "this.__header_text.set_text(value);" }); this.defineEvent("close"); this.initialize_header = function (header) { var target; target = this.__header_icon = new flyingon.Icon().set_column3("before").set_icon("dialog").addClass("flyingon-Dialog-icon"); target = this.__header_text = new flyingon.Label().set_column3("center").addClass("flyingon-Dialog-text"); target = this.__header_close = new flyingon.Icon().set_column3("after").set_icon("close").addClass("flyingon-Dialog-close").on("click", function (event) { target.close(); }); header.appendChild(this.__header_icon, this.__header_text, target); target = this; }; this.__event_capture_mousedown = function (event) { if (this.__dialog_move__ = event.which === 1 && event.in_dom(this.dom_header)) { return false; } }; this.__event_capture_mousemove = function (event) { if (event.pressdown && this.__dialog_move__) { var start = event.pressdown.start || (event.pressdown.start = { x: this.offsetLeft, y: this.offsetTop }); this.set_left(start.x + event.distanceX + "px"); this.set_top(start.y + event.distanceY + "px"); this.__fn_registry_update(this, true); } }; this.show = function (parentWindow) { show.call(this, parentWindow, false); }; this.showDialog = function (parentWindow) { show.call(this, parentWindow, true); }; function show(parentWindow, showDialog) { var host = (this.__mainWindow = (this.__parentWindow = parentWindow).get_mainWindow()).dom_window; if (showDialog) { var mask = this.dom_mask = document.createElement("div"); mask.flyingon = this; mask.style.cssText = "position:absolute;left:0;top:0;width:100%;height:100%;overflow:hidden;background-color:silver;filter:alpha(opacity=10);-moz-opacity:0.1;-khtml-opacity:0.1;opacity:0.1;"; host.appendChild(mask); } host.appendChild(this.dom); this.__states = { active: true }; this.dom.className += " flyingon-Window--active"; flyingon.__all_windows.push(this); flyingon.__initializing = false; this.render(this.get_start() === "center"); }; this.close = function () { var parent = this.__parentWindow; if (parent && this.dispatchEvent("close") !== false) { this.__parentWindow = this.__mainWindow = null; this.dispose(); flyingon.dom_dispose(this.dom); this.dom.innerHTML = ""; if (this.dom_mask) { flyingon.dom_dispose(this.dom_mask); } flyingon.__all_windows.remove(this); parent.active(); } }; this.before_measure = function (box) {
        var header = this.__header, style1 = this.dom_header.style, style2 = this.dom_body.style, y = 0; if (this.get_header()) { style1.display = ""; header.__update_dirty = 1; header.__arrange_dirty = true; header.measure(this.offsetWidth - box.border_width, 25, true, true); header.render(); style1.height = (y = header.offsetHeight) + "px"; } else
        { style1.display = "none"; } style2.top = y + "px"; style2.height = this.offsetHeight - box.border_width - y + "px";
    }; this.render = function (center) { var dom = this.dom; if (this.__update_dirty === 1) { flyingon.__fn_compute_css(this); this.__update_dirty = 2; } if (this.__arrange_dirty) { this.measure(+this.get_width() || this.defaultWidth, +this.get_height() || this.defaultHeight); if (center) { this.set_left(((dom.parentNode.clientWidth - this.offsetWidth) >> 1) + "px"); this.set_top(((dom.parentNode.clientHeight - this.offsetHeight) >> 1) + "px"); } dom.style.left = this.get_left(); dom.style.top = this.get_top(); this.offsetLeft = dom.offsetLeft; this.offsetTop = dom.offsetTop; } base.render.call(this); };
}); (function (flyingon) { var language = {}; flyingon.translate = function (file, message) { var value = language[file] || (language[file] = flyingon.ajax_get(file.replace("@langauge", flyingon.current_language), "json")); return (value = value[message]) != null ? value : message; }; flyingon.addEventListener(window, "error", function (message, url, line) { var error = flyingon.last_error; if (error && (message = flyingon.translate("error.js", error.message)) && error.parameters) { error = error.parameters; message = message.replace(/\{(\d+)\}/g, function (_, key) { return error[key] || ""; }); } alert(message); return true; }); })(flyingon);
